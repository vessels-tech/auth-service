openapi: "3.0.3"
info:
  title: Mojaloop Auth-Service API
  version: "0.1.0"
  description: |
    An API a central auth service in Mojaloop, concerned with creating 
    and managing Consents and validating thirdparty transactions
  license:
    name: Open API for FSP Interoperability (FSPIOP) (Implementation Friendly Version)
servers:
  - url: http://auth-service.local:4004/
paths:
  /health:
    get:
      tags:
        - health
      responses:
        200: 
          $ref: '#/components/responses/200'
        400: 
          $ref: '#/components/responses/400'
        401: 
          $ref: '#/components/responses/401'
        403: 
          $ref: '#/components/responses/403'
        404: 
          $ref: '#/components/responses/404'
        405: 
          $ref: '#/components/responses/405'
        406: 
          $ref: '#/components/responses/406'
        501: 
          $ref: '#/components/responses/501'
        503: 
          $ref: '#/components/responses/503'
      operationId: HealthGet
      summary: Get current status of the API
      description: The HTTP request `GET /health` is used to return the current status of the API.

  /metrics:
    get:
      tags:
        - metrics
      operationId: MetricsGet
      summary: Prometheus metrics endpoint
      description: The HTTP request `GET /metrics` is used to return metrics for the API.
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        405:
          $ref: '#/components/responses/405'
        406:
          $ref: '#/components/responses/406'
        501:
          $ref: '#/components/responses/501'
        503:
          $ref: '#/components/responses/503'
  
  /hello:
    get:
      tags:
        - metrics
      responses:
        200:
          $ref: '#/components/responses/200'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        405:
          $ref: '#/components/responses/405'
        406:
          $ref: '#/components/responses/406'
        501:
          $ref: '#/components/responses/501'
        503:
          $ref: '#/components/responses/503'
      operationId: HelloGet
      summary: example get
      description: The HTTP request GET /hello is used to return some example json.

  /consents:
    post:
      description: |
        The HTTP request `POST /consents` is used to create a consent object. 
        
        - Called by `DFSP` after the succesful creation and validation of a consentRequest.
      summary: CreateConsent
      tags:
        - consent
      operationId: CreateConsent
      parameters:
        # Headers
        - $ref: '#/components/parameters/Content-Length'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/Date'
        - $ref: '#/components/parameters/X-Forwarded-For'
        - $ref: '#/components/parameters/FSPIOP-Source'
        - $ref: '#/components/parameters/FSPIOP-Destination'
        - $ref: '#/components/parameters/FSPIOP-Encryption'
        - $ref: '#/components/parameters/FSPIOP-Signature'
        - $ref: '#/components/parameters/FSPIOP-URI'
        - $ref: '#/components/parameters/FSPIOP-HTTP-Method'
      requestBody:
        description: CreateConsent
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Consent'
            example:
              id: '123'
              requestId: '456'
              initiatorId: 'pispa'
              participantId: 'dfspa'
              scopes:
                - scope: 'account.balanceInquiry'
                  accountId: 'dfspa.alice.1234'
                - scope: 'account.sendTransfer'
                  accountId: 'dfspa.alice.1234'
                - scope: 'account.sendTransfer'
                  accountId: 'dfspa.alice.5678'
              credential: null
      responses:
        202:
          $ref: '#/components/responses/202'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        405:
          $ref: '#/components/responses/405'
        406:
          $ref: '#/components/responses/406'
        501:
          $ref: '#/components/responses/501'
        503:
          $ref: '#/components/responses/503'

  /consents/{ID}:
    parameters:
      #Path
      - $ref: '#/components/parameters/ID'
      #Headers
      - $ref: '#/components/parameters/Content-Type'
      - $ref: '#/components/parameters/Date'
      - $ref: '#/components/parameters/X-Forwarded-For'
      - $ref: '#/components/parameters/FSPIOP-Source'
      - $ref: '#/components/parameters/FSPIOP-Destination'
      - $ref: '#/components/parameters/FSPIOP-Encryption'
      - $ref: '#/components/parameters/FSPIOP-Signature'
      - $ref: '#/components/parameters/FSPIOP-URI'
      - $ref: '#/components/parameters/FSPIOP-HTTP-Method'
    get:
      description: >
        The HTTP request `GET /consents/{ID}` is used to get information regarding a consent object created or requested earlier. 
        The `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`.
      summary: GetConsent
      tags:
        - consent
      operationId: GetConsent
      parameters:
        #Headers
        - $ref: '#/components/parameters/Accept'
      responses:
        202:
          $ref: '#/components/responses/202'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        405:
          $ref: '#/components/responses/405'
        406:
          $ref: '#/components/responses/406'
        501:
          $ref: '#/components/responses/501'
        503:
          $ref: '#/components/responses/503'
    put:
      description: |
        The HTTP request `PUT /consents/{ID}` is used to update a specified consent object. 
        The `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`.

        - Called by a `auth-service` to add the credential details
        
        - Called by a `PISP` to add a signature of the challenge
      summary: UpdateConsent
      tags:
        - consent
      operationId: UpdateConsent
      parameters:
        #Headers
        - $ref: '#/components/parameters/Content-Length'
      requestBody:
        description: UpdateConsent.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Consent'
            example:
              requestId: '456'
              initiatorId: 'dfspa'
              participantId: 'pispa'
              scopes:
                - scope: 'account.balanceInquiry'
                  accountId: 'dfspa.alice.1234'
                - scope: 'account.sendTransfer'
                  accountId: 'dfspa.alice.1234'
                - scope: 'account.sendTransfer'
                  accountId: 'dfspa.alice.5678'
              credential:
                id: '5678'
                credentialType: 'FIDO'
                credentialStatus: 'ACTIVE'
                challenge:
                  payload: 'base64(...)'
                  signature: 'base64(...)'
                payload: 'base64(...)'
      responses:
        202:
          $ref: '#/components/responses/202'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        405:
          $ref: '#/components/responses/405'
        406:
          $ref: '#/components/responses/406'
        501:
          $ref: '#/components/responses/501'
        503:
          $ref: '#/components/responses/503'
  
  /consents/{ID}/generateChallenge:
    post:
      description: |
        The HTTP request `POST /consents/{ID}/generateChallenge` is used to create a credential for the given Consent object. 
        The `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`.

        - Called by a `PISP` to request a challenge from the `auth-service`, which will be returned to the PISP via `PUT /consents/{ID}`
      # TODO: this name is outdated!
      summary: CreateCredential
      tags:
        - consent
      operationId: CreateCredential
      parameters:
        #Path
        - $ref: '#/components/parameters/ID'
        #Headers
        - $ref: '#/components/parameters/Content-Length'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/Date'
        - $ref: '#/components/parameters/X-Forwarded-For'
        - $ref: '#/components/parameters/FSPIOP-Source'
        - $ref: '#/components/parameters/FSPIOP-Destination'
        - $ref: '#/components/parameters/FSPIOP-Encryption'
        - $ref: '#/components/parameters/FSPIOP-Signature'
        - $ref: '#/components/parameters/FSPIOP-URI'
        - $ref: '#/components/parameters/FSPIOP-HTTP-Method'
      requestBody:
        description: CreateCredential
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCredential'
            example:
              type: 'FIDO'
      responses:
        202:
          $ref: '#/components/responses/202'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        405:
          $ref: '#/components/responses/405'
        406:
          $ref: '#/components/responses/406'
        501:
          $ref: '#/components/responses/501'
        503:
          $ref: '#/components/responses/503'

  #thirdPartyRequests
  /thirdPartyRequests/transactions/{id}/authorizations:
    post:
      # TODO: update!
      description: |
        The HTTP request `POST /thirdPartyRequests/transactions/{id}/authorizations` is called by
        the DFSP to check that a ThirdPartyRequest is valid

      summary: ThirdpartyAuthorizationRequest
      tags:
        - thirdPartyRequests
      operationId: VerifyThirdPartyAuthorization
      parameters:
        #Path
        - $ref: '#/components/parameters/ID'
        #Headers
        - $ref: '#/components/parameters/Accept'
        - $ref: '#/components/parameters/Content-Length'
        - $ref: '#/components/parameters/Content-Type'
        - $ref: '#/components/parameters/Date'
        - $ref: '#/components/parameters/X-Forwarded-For'
        - $ref: '#/components/parameters/FSPIOP-Source'
        - $ref: '#/components/parameters/FSPIOP-Destination'
        - $ref: '#/components/parameters/FSPIOP-Encryption'
        - $ref: '#/components/parameters/FSPIOP-Signature'
        - $ref: '#/components/parameters/FSPIOP-URI'
        - $ref: '#/components/parameters/FSPIOP-HTTP-Method'
      requestBody:
        description: Transaction request to be created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThirdPartyAuthorizationRequest'
            example:
              {
                #from ""PUT /quotes/456"" callback
                challenge: "<QuoteResponse object>",
                #from `PUT /authorizations/123` callback: `.authenticationInfo.authenticationValue.pinValue`
                value: "<base64 encoded binary - the signed quote response object>",
                #from `thirdpartyRequests/transactions` body
                consentId: "111",
                sourceAccountId: "dfspa.1111-2222",
                status: "PENDING"
              }
      responses:
        202:
          $ref: '#/components/responses/202'
        400:
          $ref: '#/components/responses/400'
        401:
          $ref: '#/components/responses/401'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        405:
          $ref: '#/components/responses/405'
        406:
          $ref: '#/components/responses/406'
        501:
          $ref: '#/components/responses/501'
        503:
          $ref: '#/components/responses/503'

components:
  parameters:
    $ref: node_modules/api-snippets/v1.0/openapi3/parameters/index.yaml

  responses:
    $ref: node_modules/api-snippets/v1.0/openapi3/responses/index.yaml

  schemas:
    # Schemas Specific to this service - in alphabetical order
    #
    # Note: eventually these should be submitted to the `mojaloop/api-snippets` repo
    #       as they will be shared with other PISP work, but keep them here now for 
    #       easy reference and quick modification
    AccountAddress:
      title: AccountAddress
      type: string
      description: Unique routable address which is DFSP specific.
      pattern: ^([0-9A-Za-z_~\-\.]+[0-9A-Za-z_~\-])$
      minLength: 1
      maxLength: 1023

    AccountId:
      type: string
      description: >
        A long-lived account identifier provided by the DFSP
        this MUST NOT be Bank Account Number or anything that
        may expose a User's private bank account information

    AuthScopesEnum:
      title: AuthScopesEnum
      type: string
      enum:
        - accounts.getBalance
        - accounts.transfer
      description: |
        The scopes requested for a ConsentRequest
        - "accounts.getBalance" - Get the balance of a given account
        - "accounts.transfer" - initiate a transfer from an account

    # TODO: make this more strict for just POST /consents
    # Perhaps we should call it CreateConsentRequest
    Consent:
      title: Consent
      type: object
      description: Data model for the complex type Consent
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/CorrelationId'
          description: >
            Common ID between the PISP and FSP for the Consent object
            decided by the DFSP who creates the Consent

            This field is REQUIRED for POST /consent
        requestId:
          allOf:
            - $ref: '#/components/schemas/CorrelationId'
          description: >
            The id of the ConsentRequest that was used to initiate the
            creation of this Consent
        participantId:
          $ref: '#/components/schemas/FspId'
          description: FSP identifier who issued this Consent
        initiatorId:
          allOf:
            - $ref: '#/components/schemas/FspId'
          description: PISP identifier who uses this Consent
        scopes:
          type: array
          items:
            $ref: '#/components/schemas/Scope'
        credential:
          $ref: '#/components/schemas/Credential'

    Credential:
      title: Credential
      type: object
      description: >
        A credential used to allow a user to prove their identity and access to an account with a DFSP
      properties:
        id:
          type: string
          description: The id of a Credential
        type:
          $ref: '#/components/schemas/CredentialTypeEnum'
        status:
          $ref: '#/components/schemas/CredentialStatusEnum'
        challenge:
          $ref: '#/components/schemas/CredentialChallenge'
        payload:
          type: string
          description: Base64 encoded bytes - The public key of the Public/Private keypair
      required:
        - id
        - credentialType
        - credentialStatus

    CreateCredential:
      title: CreateCredential
      type: object
      description: >
        A credential used to allow a user to prove their identity and access to an account with a DFSP
      properties:
        type:
          $ref: '#/components/schemas/CredentialTypeEnum'
      required:
        - credentialType
    CredentialChallenge:
      title: CredentialChallenge
      type: object
      description: >
        The challenge issued by a DFSP that must be answered by the PISP
      properties:
        payload:
          type: string
          description: Base64 encoded binary of the challenge that must be answered by the PISP
        signature:
          type: string
          description: Base64 enoded binary string or result of the payload signed by the PISP using the private key
      required:
        - payload

    CredentialStatusEnum:
      title: CredentialStatus
      type: string
      enum:
        - PENDING
        - ACTIVE
      description: |
        The status of the Credential's creation
        - "PENDING" - The PISP has requested a challenge, or the challenge has initialized but not yet answered by the PISP
        - "ACTIVE" - The Credential is valid, and ready to be used by the PISP
    
    CredentialTypeEnum:
      title: CredentialTypeEnum
      type: string
      enum:
        - FIDO
      description: |
        The type of the Credential
        - "FIDO" - A FIDO public/private keypair

    Scope:
      title: Scope
      type: object
      description: Scope + Account Identifier mapping for a Consent
      properties:
        scope:
          $ref: '#/components/schemas/AuthScopesEnum'
        accountId:
          $ref: '#/components/schemas/AccountId'
      required:
        - scope
        - accountId

    ThirdPartyAuthorizationRequest:
      title: ThirdPartyAuthorizationRequest
      type: object
      description: The Request object for verifying an authorization
      # TODO: finish me!!!
      properties:
        challenge: 
          type: string
          description: The original Challenge Object as a JSON string
      required:
        - challenge
        

    # Mojaloop common schemas
    Amount:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/Amount.yaml
    AmountType:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/AmountType.yaml
    AuthenticationInfo:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/AuthenticationInfo.yaml
    AuthenticationType:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/AuthenticationType.yaml
    AuthenticationValue:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/AuthenticationValue.yaml
    AuthorizationResponse:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/AuthorizationResponse.yaml
    AuthorizationsIDPutResponse:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/AuthorizationsIDPutResponse.yaml
    BalanceOfPayments:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/BalanceOfPayments.yaml
    BinaryString:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/BinaryString.yaml
    BinaryString32:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/BinaryString32.yaml
    BulkQuotesIDPutResponse:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/BulkQuotesIDPutResponse.yaml
    BulkQuotesPostRequest:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/BulkQuotesPostRequest.yaml
    BulkTransfersIDPutResponse:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/BulkTransfersIDPutResponse.yaml
    BulkTransfersPostRequest:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/BulkTransfersPostRequest.yaml
    BulkTransferState:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/BulkTransferState.yaml
    Code:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/Code.yaml
    CorrelationId:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/CorrelationId.yaml
    Currency:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/Currency.yaml
    Date:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/Date.yaml
    DateOfBirth:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/DateOfBirth.yaml
    DateTime:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/DateTime.yaml
    ErrorCode:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/ErrorCode.yaml
    ErrorDescription:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/ErrorDescription.yaml
    ErrorInformation:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/ErrorInformation.yaml
    ErrorInformationObject:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/ErrorInformationObject.yaml
    ErrorInformationResponse:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/ErrorInformationResponse.yaml
    Extension:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/Extension.yaml
    ExtensionKey:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/ExtensionKey.yaml
    ExtensionList:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/ExtensionList.yaml
    ExtensionValue:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/ExtensionValue.yaml
    FirstName:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/FirstName.yaml
    FspId:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/FspId.yaml
    GeoCode:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/GeoCode.yaml
    IlpCondition:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/IlpCondition.yaml
    IlpFulfilment:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/IlpFulfilment.yaml
    IlpPacket:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/IlpPacket.yaml
    IndividualQuote:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/IndividualQuote.yaml
    IndividualQuoteResult:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/IndividualQuoteResult.yaml
    IndividualTransfer:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/IndividualTransfer.yaml
    IndividualTransferResult:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/IndividualTransferResult.yaml
    Integer:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/Integer.yaml
    LastName:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/LastName.yaml
    Latitude:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/Latitude.yaml
    Longitude:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/Longitude.yaml
    MerchantClassificationCode:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/MerchantClassificationCode.yaml
    MiddleName:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/MiddleName.yaml
    Money:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/Money.yaml
    Name:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/Name.yaml
    Note:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/Note.yaml
    OtpValue:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/OtpValue.yaml
    ParticipantsIDPutResponse:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/ParticipantsIDPutResponse.yaml
    ParticipantsPostRequest:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/ParticipantsPostRequest.yaml
    ParticipantsTypeIDPutResponse:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/ParticipantsTypeIDPutResponse.yaml
    ParticipantsTypeIDSubIDPostRequest:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/ParticipantsTypeIDSubIDPostRequest.yaml
    PartiesTypeIDPutResponse:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/PartiesTypeIDPutResponse.yaml
    Party:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/Party.yaml
    PartyComplexName:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/PartyComplexName.yaml
    PartyIdentifier:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/PartyIdentifier.yaml
    PartyIdInfo:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/PartyIdInfo.yaml
    PartyIdType:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/PartyIdType.yaml
    PartyName:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/PartyName.yaml
    PartyPersonalInfo:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/PartyPersonalInfo.yaml
    PartyResult:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/PartyResult.yaml
    PartySubIdOrType:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/PartySubIdOrType.yaml
    PersonalIdentifierType:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/PersonalIdentifierType.yaml
    QRCODE:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/QRCODE.yaml
    QuotesIDPutResponse:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/QuotesIDPutResponse.yaml
    QuotesPostRequest:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/QuotesPostRequest.yaml
    Refund:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/Refund.yaml
    RefundReason:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/RefundReason.yaml
    TokenCode:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/TokenCode.yaml
    Transaction:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/Transaction.yaml
    TransactionInitiator:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/TransactionInitiator.yaml
    TransactionInitiatorType:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/TransactionInitiatorType.yaml
    TransactionRequestsIDPutResponse:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/TransactionRequestsIDPutResponse.yaml
    TransactionRequestsPostRequest:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/TransactionRequestsPostRequest.yaml
    TransactionRequestState:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/TransactionRequestState.yaml
    TransactionScenario:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/TransactionScenario.yaml
    TransactionsIDPutResponse:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/TransactionsIDPutResponse.yaml
    TransactionState:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/TransactionState.yaml
    TransactionSubScenario:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/TransactionSubScenario.yaml
    TransactionType:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/TransactionType.yaml
    TransfersIDPutResponse:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/TransfersIDPutResponse.yaml
    TransfersPostRequest:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/TransfersPostRequest.yaml
    TransferState:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/TransferState.yaml
    UndefinedEnum:
      $ref: node_modules/api-snippets/v1.0/openapi3/schemas/UndefinedEnum.yaml