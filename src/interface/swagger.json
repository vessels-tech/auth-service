{
  "openapi": "3.0.3",
  "info": {
    "title": "Mojaloop Auth-Service API",
    "version": "0.1.0",
    "description": "An API a central auth service in Mojaloop, concerned with creating \nand managing Consents and validating thirdparty transactions\n",
    "license": {
      "name": "Open API for FSP Interoperability (FSPIOP) (Implementation Friendly Version)"
    }
  },
  "servers": [
    {
      "url": "http://auth-service.local:4004/"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "health"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "operationId": "HealthGet",
        "summary": "Get current status of the API",
        "description": "The HTTP request `GET /health` is used to return the current status of the API."
      }
    },
    "/metrics": {
      "get": {
        "tags": [
          "metrics"
        ],
        "operationId": "MetricsGet",
        "summary": "Prometheus metrics endpoint",
        "description": "The HTTP request `GET /metrics` is used to return metrics for the API.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/hello": {
      "get": {
        "tags": [
          "metrics"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "operationId": "HelloGet",
        "summary": "example get",
        "description": "The HTTP request GET /hello is used to return some example json."
      }
    },
    "/consents": {
      "post": {
        "description": "The HTTP request `POST /consents` is used to create a consent object. \n\n- Called by `DFSP` after the succesful creation and validation of a consentRequest.\n",
        "summary": "CreateConsent",
        "tags": [
          "consent"
        ],
        "operationId": "CreateConsent",
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Length"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "$ref": "#/components/parameters/Date"
          },
          {
            "$ref": "#/components/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-Destination"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-HTTP-Method"
          }
        ],
        "requestBody": {
          "description": "CreateConsent",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Consent"
              },
              "example": {
                "id": "123",
                "requestId": "456",
                "initiatorId": "pispa",
                "participantId": "dfspa",
                "scopes": [
                  {
                    "scope": "account.balanceInquiry",
                    "accountId": "dfspa.alice.1234"
                  },
                  {
                    "scope": "account.sendTransfer",
                    "accountId": "dfspa.alice.1234"
                  },
                  {
                    "scope": "account.sendTransfer",
                    "accountId": "dfspa.alice.5678"
                  }
                ],
                "credential": null
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/consents/{ID}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ID"
        },
        {
          "$ref": "#/components/parameters/Content-Type"
        },
        {
          "$ref": "#/components/parameters/Date"
        },
        {
          "$ref": "#/components/parameters/X-Forwarded-For"
        },
        {
          "$ref": "#/components/parameters/FSPIOP-Source"
        },
        {
          "$ref": "#/components/parameters/FSPIOP-Destination"
        },
        {
          "$ref": "#/components/parameters/FSPIOP-Encryption"
        },
        {
          "$ref": "#/components/parameters/FSPIOP-Signature"
        },
        {
          "$ref": "#/components/parameters/FSPIOP-URI"
        },
        {
          "$ref": "#/components/parameters/FSPIOP-HTTP-Method"
        }
      ],
      "get": {
        "description": "The HTTP request `GET /consents/{ID}` is used to get information regarding a consent object created or requested earlier.  The `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`.\n",
        "summary": "GetConsent",
        "tags": [
          "consent"
        ],
        "operationId": "GetConsent",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "put": {
        "description": "The HTTP request `PUT /consents/{ID}` is used to update a specified consent object. \nThe `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`.\n\n- Called by a `auth-service` to add the credential details\n\n- Called by a `PISP` to add a signature of the challenge\n",
        "summary": "UpdateConsent",
        "tags": [
          "consent"
        ],
        "operationId": "UpdateConsent",
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Length"
          }
        ],
        "requestBody": {
          "description": "UpdateConsent.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Consent"
              },
              "example": {
                "requestId": "456",
                "initiatorId": "dfspa",
                "participantId": "pispa",
                "scopes": [
                  {
                    "scope": "account.balanceInquiry",
                    "accountId": "dfspa.alice.1234"
                  },
                  {
                    "scope": "account.sendTransfer",
                    "accountId": "dfspa.alice.1234"
                  },
                  {
                    "scope": "account.sendTransfer",
                    "accountId": "dfspa.alice.5678"
                  }
                ],
                "credential": {
                  "id": "5678",
                  "credentialType": "FIDO",
                  "credentialStatus": "ACTIVE",
                  "challenge": {
                    "payload": "base64(...)",
                    "signature": "base64(...)"
                  },
                  "payload": "base64(...)"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/consents/{ID}/generateChallenge": {
      "post": {
        "description": "The HTTP request `POST /consents/{ID}/generateChallenge` is used to create a credential for the given Consent object. \nThe `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`.\n\n- Called by a `PISP` to request a challenge from the `auth-service`, which will be returned to the PISP via `PUT /consents/{ID}`\n",
        "summary": "GenerateChallengeRequest",
        "tags": [
          "consent"
        ],
        "operationId": "GenerateChallengeRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          },
          {
            "$ref": "#/components/parameters/Content-Length"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "$ref": "#/components/parameters/Date"
          },
          {
            "$ref": "#/components/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-Destination"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-HTTP-Method"
          }
        ],
        "requestBody": {
          "description": "GenerateChallengeRequest",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateChallengeRequest"
              },
              "example": {}
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/thirdPartyRequests/transactions/{ID}/authorizations": {
      "post": {
        "description": "The HTTP request `POST /thirdPartyRequests/transactions/{id}/authorizations` is called by\nthe DFSP to check that a ThirdPartyRequest is valid\n",
        "summary": "ThirdpartyAuthorizationRequest",
        "tags": [
          "thirdPartyRequests"
        ],
        "operationId": "VerifyThirdPartyAuthorization",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          },
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Content-Length"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "$ref": "#/components/parameters/Date"
          },
          {
            "$ref": "#/components/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-Destination"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-HTTP-Method"
          }
        ],
        "requestBody": {
          "description": "Transaction request to be created.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThirdPartyAuthorizationRequest"
              },
              "example": {
                "challenge": "<QuoteResponse object>",
                "value": "<base64 encoded binary - the signed quote response object>",
                "consentId": "111",
                "sourceAccountId": "dfspa.1111-2222",
                "status": "PENDING"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "Accept": {
        "name": "Accept",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The `Accept` header field indicates the version of the API the client would like the server to use."
      },
      "Content-Length": {
        "name": "Content-Length",
        "in": "header",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.\n**Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes)."
      },
      "Content-Type": {
        "name": "Content-Type",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": true,
        "description": "The `Content-Type` header indicates the specific version of the API used to send the payload body."
      },
      "Date": {
        "name": "Date",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": true,
        "description": "The `Date` header field indicates the date when the request was sent."
      },
      "FSPIOP-Destination": {
        "name": "FSPIOP-Destination",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "description": "The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field should be set by the original sender of the request (if known), so that any entities between the client and the server do not need to parse the payload for routing purposes."
      },
      "FSPIOP-Encryption": {
        "name": "FSPIOP-Encryption",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "description": "The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request."
      },
      "FSPIOP-HTTP-Method": {
        "name": "FSPIOP-HTTP-Method",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "description": "The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set)."
      },
      "FSPIOP-Signature": {
        "name": "FSPIOP-Signature",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "description": "The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature."
      },
      "FSPIOP-Source": {
        "name": "FSPIOP-Source",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": true,
        "description": "The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`)."
      },
      "FSPIOP-URI": {
        "name": "FSPIOP-URI",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "description": "The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set)."
      },
      "ID": {
        "name": "ID",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The identifier value."
      },
      "SubId": {
        "name": "SubId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`."
      },
      "Type": {
        "name": "Type",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`."
      },
      "X-Forwarded-For": {
        "name": "X-Forwarded-For",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "description": "The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.\n**Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`."
      }
    },
    "responses": {
      "200": {
        "description": "OK"
      },
      "202": {
        "description": "Accepted"
      },
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInformationResponse"
            }
          }
        },
        "headers": {
          "Content-Length": {
            "$ref": "#/components/parameters/Content-Length"
          },
          "Content-Type": {
            "$ref": "#/components/parameters/Content-Type"
          }
        }
      },
      "401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInformationResponse"
            }
          }
        },
        "headers": {
          "Content-Length": {
            "$ref": "#/components/parameters/Content-Length"
          },
          "Content-Type": {
            "$ref": "#/components/parameters/Content-Type"
          }
        }
      },
      "403": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInformationResponse"
            }
          }
        },
        "headers": {
          "Content-Length": {
            "$ref": "#/components/parameters/Content-Length"
          },
          "Content-Type": {
            "$ref": "#/components/parameters/Content-Type"
          }
        }
      },
      "404": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInformationResponse"
            }
          }
        },
        "headers": {
          "Content-Length": {
            "$ref": "#/components/parameters/Content-Length"
          },
          "Content-Type": {
            "$ref": "#/components/parameters/Content-Type"
          }
        }
      },
      "405": {
        "description": "Method Not Allowed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInformationResponse"
            }
          }
        },
        "headers": {
          "Content-Length": {
            "$ref": "#/components/parameters/Content-Length"
          },
          "Content-Type": {
            "$ref": "#/components/parameters/Content-Type"
          }
        }
      },
      "406": {
        "description": "Not Acceptable",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInformationResponse"
            }
          }
        },
        "headers": {
          "Content-Length": {
            "$ref": "#/components/parameters/Content-Length"
          },
          "Content-Type": {
            "$ref": "#/components/parameters/Content-Type"
          }
        }
      },
      "501": {
        "description": "Not Implemented",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInformationResponse"
            }
          }
        },
        "headers": {
          "Content-Length": {
            "$ref": "#/components/parameters/Content-Length"
          },
          "Content-Type": {
            "$ref": "#/components/parameters/Content-Type"
          }
        }
      },
      "503": {
        "description": "Service Unavailable",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInformationResponse"
            }
          }
        },
        "headers": {
          "Content-Length": {
            "$ref": "#/components/parameters/Content-Length"
          },
          "Content-Type": {
            "$ref": "#/components/parameters/Content-Type"
          }
        }
      }
    },
    "schemas": {
      "AccountAddress": {
        "title": "AccountAddress",
        "type": "string",
        "description": "Unique routable address which is DFSP specific.",
        "pattern": "^([0-9A-Za-z_~\\-\\.]+[0-9A-Za-z_~\\-])$",
        "minLength": 1,
        "maxLength": 1023
      },
      "AccountId": {
        "type": "string",
        "description": "A long-lived account identifier provided by the DFSP this MUST NOT be Bank Account Number or anything that may expose a User's private bank account information\n"
      },
      "AuthScopesEnum": {
        "title": "AuthScopesEnum",
        "type": "string",
        "enum": [
          "accounts.getBalance",
          "accounts.transfer"
        ],
        "description": "The scopes requested for a ConsentRequest\n- \"accounts.getBalance\" - Get the balance of a given account\n- \"accounts.transfer\" - initiate a transfer from an account\n"
      },
      "Consent": {
        "title": "Consent",
        "type": "object",
        "description": "Data model for the complex type Consent",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CorrelationId"
              }
            ],
            "description": "Common ID between the PISP and FSP for the Consent object decided by the DFSP who creates the Consent\nThis field is REQUIRED for POST /consent\n"
          },
          "requestId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CorrelationId"
              }
            ],
            "description": "The id of the ConsentRequest that was used to initiate the creation of this Consent\n"
          },
          "participantId": {
            "$ref": "#/components/schemas/FspId"
          },
          "initiatorId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FspId"
              }
            ],
            "description": "PISP identifier who uses this Consent"
          },
          "scopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Scope"
            }
          },
          "credential": {
            "$ref": "#/components/schemas/Credential"
          }
        }
      },
      "Credential": {
        "title": "Credential",
        "type": "object",
        "description": "A credential used to allow a user to prove their identity and access to an account with a DFSP\n",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of a Credential"
          },
          "type": {
            "$ref": "#/components/schemas/CredentialTypeEnum"
          },
          "status": {
            "$ref": "#/components/schemas/CredentialStatusEnum"
          },
          "challenge": {
            "$ref": "#/components/schemas/CredentialChallenge"
          },
          "payload": {
            "type": "string",
            "description": "Base64 encoded bytes - The public key of the Public/Private keypair"
          }
        },
        "required": [
          "id",
          "credentialType",
          "credentialStatus"
        ]
      },
      "GenerateChallengeRequest": {
        "title": "GenerateChallengeRequest",
        "type": "object",
        "description": "A credential used to allow a user to prove their identity and access to an account with a DFSP\n",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CredentialTypeEnum"
          }
        },
        "required": [
          "credentialType"
        ]
      },
      "CredentialChallenge": {
        "title": "CredentialChallenge",
        "type": "object",
        "description": "The challenge issued by a DFSP that must be answered by the PISP\n",
        "properties": {
          "payload": {
            "type": "string",
            "description": "Base64 encoded binary of the challenge that must be answered by the PISP"
          },
          "signature": {
            "type": "string",
            "description": "Base64 enoded binary string or result of the payload signed by the PISP using the private key"
          }
        },
        "required": [
          "payload"
        ]
      },
      "CredentialStatusEnum": {
        "title": "CredentialStatus",
        "type": "string",
        "enum": [
          "PENDING",
          "ACTIVE"
        ],
        "description": "The status of the Credential's creation\n- \"PENDING\" - The PISP has requested a challenge, or the challenge has initialized but not yet answered by the PISP\n- \"ACTIVE\" - The Credential is valid, and ready to be used by the PISP\n"
      },
      "CredentialTypeEnum": {
        "title": "CredentialTypeEnum",
        "type": "string",
        "enum": [
          "FIDO"
        ],
        "description": "The type of the Credential\n- \"FIDO\" - A FIDO public/private keypair\n"
      },
      "Scope": {
        "title": "Scope",
        "type": "object",
        "description": "Scope + Account Identifier mapping for a Consent",
        "properties": {
          "scope": {
            "$ref": "#/components/schemas/AuthScopesEnum"
          },
          "accountId": {
            "$ref": "#/components/schemas/AccountId"
          }
        },
        "required": [
          "scope",
          "accountId"
        ]
      },
      "ThirdPartyAuthorizationRequest": {
        "title": "ThirdPartyAuthorizationRequest",
        "type": "object",
        "description": "The Request object for verifying an authorization",
        "properties": {
          "challenge": {
            "type": "string",
            "description": "The original Challenge Object as a JSON string"
          }
        },
        "required": [
          "challenge"
        ]
      },
      "BinaryString": {
        "type": "string",
        "pattern": "^[A-Za-z0-9-_]+[=]{0,2}$",
        "description": "The API data type BinaryString is a JSON String. The string is a base64url  encoding of a string of raw bytes, where padding (character ‘=’) is added at the end of the data if needed to ensure that the string is a multiple of 4 characters. The length restriction indicates the allowed number of characters."
      },
      "BinaryString32": {
        "type": "string",
        "pattern": "^[A-Za-z0-9-_]{43}$",
        "description": "The API data type BinaryString32 is a fixed size version of the API data type BinaryString, where the raw underlying data is always of 32 bytes. The data type BinaryString32 should not use a padding character as the size of the underlying data is fixed."
      },
      "CorrelationId": {
        "title": "CorrelationId",
        "type": "string",
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
        "description": "Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘)."
      },
      "Date": {
        "title": "Date",
        "type": "string",
        "pattern": "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$",
        "description": "The API data type Date is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.\nThis format, as specified in ISO 8601, contains a date only. A more readable version of the format is yyyy-MM-dd. Examples are \"1982-05-23\", \"1987-08-05”."
      },
      "DateTime": {
        "title": "DateTime",
        "type": "string",
        "pattern": "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:(\\.\\d{3}))(?:Z|[+-][01]\\d:[0-5]\\d)$",
        "description": "The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.\nThe format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are \"2016-05-24T08:38:08.699-04:00\", \"2016-05-24T08:38:08.699Z\" (where Z indicates Zulu time zone, same as UTC)."
      },
      "ErrorCode": {
        "title": "ErrorCode",
        "type": "string",
        "pattern": "^[1-9]\\d{3}$",
        "description": "The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error."
      },
      "ErrorDescription": {
        "title": "ErrorDescription",
        "type": "string",
        "minLength": 1,
        "maxLength": 128,
        "description": "Error description string."
      },
      "ErrorInformationObject": {
        "title": "ErrorInformationObject",
        "type": "object",
        "description": "Data model for the complex type object that contains ErrorInformation.",
        "properties": {
          "errorInformation": {
            "$ref": "#/components/schemas/ErrorInformation"
          }
        },
        "required": [
          "errorInformation"
        ]
      },
      "ErrorInformationResponse": {
        "title": "ErrorInformationResponse",
        "type": "object",
        "description": "Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses.",
        "properties": {
          "errorInformation": {
            "$ref": "#/components/schemas/ErrorInformation"
          }
        }
      },
      "ExtensionKey": {
        "title": "ExtensionKey",
        "type": "string",
        "minLength": 1,
        "maxLength": 32,
        "description": "Extension key."
      },
      "ExtensionList": {
        "title": "ExtensionList",
        "type": "object",
        "description": "Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.",
        "properties": {
          "extension": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Extension"
            },
            "minItems": 1,
            "maxItems": 16,
            "description": "Number of Extension elements."
          }
        },
        "required": [
          "extension"
        ]
      },
      "ExtensionValue": {
        "title": "ExtensionValue",
        "type": "string",
        "minLength": 1,
        "maxLength": 128,
        "description": "Extension value."
      },
      "FspId": {
        "title": "FspId",
        "type": "string",
        "minLength": 1,
        "maxLength": 32,
        "description": "FSP identifier."
      },
      "ErrorInformation": {
        "title": "ErrorInformation",
        "type": "object",
        "description": "Data model for the complex type ErrorInformation.",
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/ErrorCode"
          },
          "errorDescription": {
            "$ref": "#/components/schemas/ErrorDescription"
          },
          "extensionList": {
            "$ref": "#/components/schemas/ExtensionList"
          }
        },
        "required": [
          "errorCode",
          "errorDescription"
        ]
      },
      "Extension": {
        "title": "Extension",
        "type": "object",
        "description": "Data model for the complex type Extension.",
        "properties": {
          "key": {
            "$ref": "#/components/schemas/ExtensionKey"
          },
          "value": {
            "$ref": "#/components/schemas/ExtensionValue"
          }
        },
        "required": [
          "key",
          "value"
        ]
      }
    }
  }
}
