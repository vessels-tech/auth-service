{
  "openapi": "3.0.3",
  "info": {
    "title": "Mojaloop Auth-Service API",
    "version": "0.1.0",
    "description": "An API a central auth service in Mojaloop, concerned with creating \nand managing Consents and validating thirdparty transactions\n",
    "license": {
      "name": "Open API for FSP Interoperability (FSPIOP) (Implementation Friendly Version)"
    }
  },
  "servers": [
    {
      "url": "http://auth-service.local:4004/"
    }
  ],
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "health"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "operationId": "HealthGet",
        "summary": "Get current status of the API",
        "description": "The HTTP request `GET /health` is used to return the current status of the API."
      }
    },
    "/metrics": {
      "get": {
        "tags": [
          "metrics"
        ],
        "operationId": "MetricsGet",
        "summary": "Prometheus metrics endpoint",
        "description": "The HTTP request `GET /metrics` is used to return metrics for the API.",
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/hello": {
      "get": {
        "tags": [
          "metrics"
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        },
        "operationId": "HelloGet",
        "summary": "example get",
        "description": "The HTTP request GET /hello is used to return some example json."
      }
    },
    "/consents": {
      "post": {
        "description": "The HTTP request `POST /consents` is used to create a consent object. \n\n- Called by `DFSP` after the succesful creation and validation of a consentRequest.\n",
        "summary": "CreateConsent",
        "tags": [
          "consent"
        ],
        "operationId": "CreateConsent",
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Length"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "$ref": "#/components/parameters/Date"
          },
          {
            "$ref": "#/components/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-Destination"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-HTTP-Method"
          }
        ],
        "requestBody": {
          "description": "CreateConsent",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Consent"
              },
              "example": {
                "id": "123",
                "requestId": "456",
                "initiatorId": "pispa",
                "participantId": "dfspa",
                "scopes": [
                  {
                    "scope": "account.balanceInquiry",
                    "accountId": "dfspa.alice.1234"
                  },
                  {
                    "scope": "account.sendTransfer",
                    "accountId": "dfspa.alice.1234"
                  },
                  {
                    "scope": "account.sendTransfer",
                    "accountId": "dfspa.alice.5678"
                  }
                ],
                "credential": null
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/consents/{ID}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ID"
        },
        {
          "$ref": "#/components/parameters/Content-Type"
        },
        {
          "$ref": "#/components/parameters/Date"
        },
        {
          "$ref": "#/components/parameters/X-Forwarded-For"
        },
        {
          "$ref": "#/components/parameters/FSPIOP-Source"
        },
        {
          "$ref": "#/components/parameters/FSPIOP-Destination"
        },
        {
          "$ref": "#/components/parameters/FSPIOP-Encryption"
        },
        {
          "$ref": "#/components/parameters/FSPIOP-Signature"
        },
        {
          "$ref": "#/components/parameters/FSPIOP-URI"
        },
        {
          "$ref": "#/components/parameters/FSPIOP-HTTP-Method"
        }
      ],
      "get": {
        "description": "The HTTP request `GET /consents/{ID}` is used to get information regarding a consent object created or requested earlier.  The `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`.\n",
        "summary": "GetConsent",
        "tags": [
          "consent"
        ],
        "operationId": "GetConsent",
        "parameters": [
          {
            "$ref": "#/components/parameters/Accept"
          }
        ],
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "put": {
        "description": "The HTTP request `PUT /consents/{ID}` is used to update a specified consent object. \nThe `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`.\n\n- Called by a `auth-service` to add the credential details\n\n- Called by a `PISP` to add a signature of the challenge\n",
        "summary": "UpdateConsent",
        "tags": [
          "consent"
        ],
        "operationId": "UpdateConsent",
        "parameters": [
          {
            "$ref": "#/components/parameters/Content-Length"
          }
        ],
        "requestBody": {
          "description": "UpdateConsent.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Consent"
              },
              "example": {
                "requestId": "456",
                "initiatorId": "dfspa",
                "participantId": "pispa",
                "scopes": [
                  {
                    "scope": "account.balanceInquiry",
                    "accountId": "dfspa.alice.1234"
                  },
                  {
                    "scope": "account.sendTransfer",
                    "accountId": "dfspa.alice.1234"
                  },
                  {
                    "scope": "account.sendTransfer",
                    "accountId": "dfspa.alice.5678"
                  }
                ],
                "credential": {
                  "id": "5678",
                  "credentialType": "FIDO",
                  "credentialStatus": "ACTIVE",
                  "challenge": {
                    "payload": "base64(...)",
                    "signature": "base64(...)"
                  },
                  "payload": "base64(...)"
                }
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/consents/{ID}/generateChallenge": {
      "post": {
        "description": "The HTTP request `POST /consents/{ID}/generateChallenge` is used to create a credential for the given Consent object. \nThe `{ID}` in the URI should contain the `{ID}` that was used in the `POST /consents`.\n\n- Called by a `PISP` to request a challenge from the `auth-service`, which will be returned to the PISP via `PUT /consents/{ID}`\n",
        "summary": "GenerateChallengeRequest",
        "tags": [
          "consent"
        ],
        "operationId": "GenerateChallengeRequest",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          },
          {
            "$ref": "#/components/parameters/Content-Length"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "$ref": "#/components/parameters/Date"
          },
          {
            "$ref": "#/components/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-Destination"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-HTTP-Method"
          }
        ],
        "requestBody": {
          "description": "GenerateChallengeRequest",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateChallengeRequest"
              },
              "example": {}
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/thirdPartyRequests/transactions/{ID}/authorizations": {
      "post": {
        "description": "The HTTP request `POST /thirdPartyRequests/transactions/{id}/authorizations` is called by\nthe DFSP to check that a ThirdPartyRequest is valid\n",
        "summary": "ThirdpartyAuthorizationRequest",
        "tags": [
          "thirdPartyRequests"
        ],
        "operationId": "VerifyThirdPartyAuthorization",
        "parameters": [
          {
            "$ref": "#/components/parameters/ID"
          },
          {
            "$ref": "#/components/parameters/Accept"
          },
          {
            "$ref": "#/components/parameters/Content-Length"
          },
          {
            "$ref": "#/components/parameters/Content-Type"
          },
          {
            "$ref": "#/components/parameters/Date"
          },
          {
            "$ref": "#/components/parameters/X-Forwarded-For"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-Source"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-Destination"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-Encryption"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-Signature"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-URI"
          },
          {
            "$ref": "#/components/parameters/FSPIOP-HTTP-Method"
          }
        ],
        "requestBody": {
          "description": "Transaction request to be created.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ThirdPartyAuthorizationRequest"
              },
              "example": {
                "challenge": "<QuoteResponse object>",
                "value": "<base64 encoded binary - the signed quote response object>",
                "consentId": "111",
                "sourceAccountId": "dfspa.1111-2222",
                "status": "PENDING"
              }
            }
          }
        },
        "responses": {
          "202": {
            "$ref": "#/components/responses/202"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "406": {
            "$ref": "#/components/responses/406"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "Accept": {
        "name": "Accept",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The `Accept` header field indicates the version of the API the client would like the server to use."
      },
      "Content-Length": {
        "name": "Content-Length",
        "in": "header",
        "required": false,
        "schema": {
          "type": "integer"
        },
        "description": "The `Content-Length` header field indicates the anticipated size of the payload body. Only sent if there is a body.\n**Note:** The API supports a maximum size of 5242880 bytes (5 Megabytes)."
      },
      "Content-Type": {
        "name": "Content-Type",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": true,
        "description": "The `Content-Type` header indicates the specific version of the API used to send the payload body."
      },
      "Date": {
        "name": "Date",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": true,
        "description": "The `Date` header field indicates the date when the request was sent."
      },
      "FSPIOP-Destination": {
        "name": "FSPIOP-Destination",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "description": "The `FSPIOP-Destination` header field is a non-HTTP standard field used by the API for HTTP header based routing of requests and responses to the destination. The field should be set by the original sender of the request (if known), so that any entities between the client and the server do not need to parse the payload for routing purposes."
      },
      "FSPIOP-Encryption": {
        "name": "FSPIOP-Encryption",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "description": "The `FSPIOP-Encryption` header field is a non-HTTP standard field used by the API for applying end-to-end encryption of the request."
      },
      "FSPIOP-HTTP-Method": {
        "name": "FSPIOP-HTTP-Method",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "description": "The `FSPIOP-HTTP-Method` header field is a non-HTTP standard field used by the API for signature verification, should contain the service HTTP method. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set)."
      },
      "FSPIOP-Signature": {
        "name": "FSPIOP-Signature",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "description": "The `FSPIOP-Signature` header field is a non-HTTP standard field used by the API for applying an end-to-end request signature."
      },
      "FSPIOP-Source": {
        "name": "FSPIOP-Source",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": true,
        "description": "The `FSPIOP-Source` header field is a non-HTTP standard field used by the API for identifying the sender of the HTTP request. The field should be set by the original sender of the request. Required for routing and signature verification (see header field `FSPIOP-Signature`)."
      },
      "FSPIOP-URI": {
        "name": "FSPIOP-URI",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "description": "The `FSPIOP-URI` header field is a non-HTTP standard field used by the API for signature verification, should contain the service URI. Required if signature verification is used, for more information, see [the API Signature document](https://github.com/mojaloop/docs/tree/master/Specification%20Document%20Set)."
      },
      "ID": {
        "name": "ID",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The identifier value."
      },
      "SubId": {
        "name": "SubId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "A sub-identifier of the party identifier, or a sub-type of the party identifier's type. For example, `PASSPORT`, `DRIVING_LICENSE`."
      },
      "Type": {
        "name": "Type",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`."
      },
      "X-Forwarded-For": {
        "name": "X-Forwarded-For",
        "in": "header",
        "schema": {
          "type": "string"
        },
        "required": false,
        "description": "The `X-Forwarded-For` header field is an unofficially accepted standard used for informational purposes of the originating client IP address, as a request might pass multiple proxies, firewalls, and so on. Multiple `X-Forwarded-For` values should be expected and supported by implementers of the API.\n**Note:** An alternative to `X-Forwarded-For` is defined in [RFC 7239](https://tools.ietf.org/html/rfc7239). However, to this point RFC 7239 is less-used and supported than `X-Forwarded-For`."
      }
    },
    "responses": {
      "200": {
        "description": "OK"
      },
      "202": {
        "description": "Accepted"
      },
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInformationResponse"
            }
          }
        },
        "headers": {
          "Content-Length": {
            "$ref": "#/components/parameters/Content-Length"
          },
          "Content-Type": {
            "$ref": "#/components/parameters/Content-Type"
          }
        }
      },
      "401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInformationResponse"
            }
          }
        },
        "headers": {
          "Content-Length": {
            "$ref": "#/components/parameters/Content-Length"
          },
          "Content-Type": {
            "$ref": "#/components/parameters/Content-Type"
          }
        }
      },
      "403": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInformationResponse"
            }
          }
        },
        "headers": {
          "Content-Length": {
            "$ref": "#/components/parameters/Content-Length"
          },
          "Content-Type": {
            "$ref": "#/components/parameters/Content-Type"
          }
        }
      },
      "404": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInformationResponse"
            }
          }
        },
        "headers": {
          "Content-Length": {
            "$ref": "#/components/parameters/Content-Length"
          },
          "Content-Type": {
            "$ref": "#/components/parameters/Content-Type"
          }
        }
      },
      "405": {
        "description": "Method Not Allowed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInformationResponse"
            }
          }
        },
        "headers": {
          "Content-Length": {
            "$ref": "#/components/parameters/Content-Length"
          },
          "Content-Type": {
            "$ref": "#/components/parameters/Content-Type"
          }
        }
      },
      "406": {
        "description": "Not Acceptable",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInformationResponse"
            }
          }
        },
        "headers": {
          "Content-Length": {
            "$ref": "#/components/parameters/Content-Length"
          },
          "Content-Type": {
            "$ref": "#/components/parameters/Content-Type"
          }
        }
      },
      "501": {
        "description": "Not Implemented",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInformationResponse"
            }
          }
        },
        "headers": {
          "Content-Length": {
            "$ref": "#/components/parameters/Content-Length"
          },
          "Content-Type": {
            "$ref": "#/components/parameters/Content-Type"
          }
        }
      },
      "503": {
        "description": "Service Unavailable",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorInformationResponse"
            }
          }
        },
        "headers": {
          "Content-Length": {
            "$ref": "#/components/parameters/Content-Length"
          },
          "Content-Type": {
            "$ref": "#/components/parameters/Content-Type"
          }
        }
      }
    },
    "schemas": {
      "AccountAddress": {
        "title": "AccountAddress",
        "type": "string",
        "description": "Unique routable address which is DFSP specific.",
        "pattern": "^([0-9A-Za-z_~\\-\\.]+[0-9A-Za-z_~\\-])$",
        "minLength": 1,
        "maxLength": 1023
      },
      "AccountId": {
        "type": "string",
        "description": "A long-lived account identifier provided by the DFSP this MUST NOT be Bank Account Number or anything that may expose a User's private bank account information\n"
      },
      "AuthScopesEnum": {
        "title": "AuthScopesEnum",
        "type": "string",
        "enum": [
          "accounts.getBalance",
          "accounts.transfer"
        ],
        "description": "The scopes requested for a ConsentRequest\n- \"accounts.getBalance\" - Get the balance of a given account\n- \"accounts.transfer\" - initiate a transfer from an account\n"
      },
      "Consent": {
        "title": "Consent",
        "type": "object",
        "description": "Data model for the complex type Consent",
        "properties": {
          "id": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CorrelationId"
              }
            ],
            "description": "Common ID between the PISP and FSP for the Consent object decided by the DFSP who creates the Consent\nThis field is REQUIRED for POST /consent\n"
          },
          "requestId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CorrelationId"
              }
            ],
            "description": "The id of the ConsentRequest that was used to initiate the creation of this Consent\n"
          },
          "participantId": {
            "$ref": "#/components/schemas/FspId",
            "description": "FSP identifier who issued this Consent"
          },
          "initiatorId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FspId"
              }
            ],
            "description": "PISP identifier who uses this Consent"
          },
          "scopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Scope"
            }
          },
          "credential": {
            "$ref": "#/components/schemas/Credential"
          }
        }
      },
      "Credential": {
        "title": "Credential",
        "type": "object",
        "description": "A credential used to allow a user to prove their identity and access to an account with a DFSP\n",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of a Credential"
          },
          "type": {
            "$ref": "#/components/schemas/CredentialTypeEnum"
          },
          "status": {
            "$ref": "#/components/schemas/CredentialStatusEnum"
          },
          "challenge": {
            "$ref": "#/components/schemas/CredentialChallenge"
          },
          "payload": {
            "type": "string",
            "description": "Base64 encoded bytes - The public key of the Public/Private keypair"
          }
        },
        "required": [
          "id",
          "credentialType",
          "credentialStatus"
        ]
      },
      "GenerateChallengeRequest": {
        "title": "GenerateChallengeRequest",
        "type": "object",
        "description": "A credential used to allow a user to prove their identity and access to an account with a DFSP\n",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CredentialTypeEnum"
          }
        },
        "required": [
          "credentialType"
        ]
      },
      "CredentialChallenge": {
        "title": "CredentialChallenge",
        "type": "object",
        "description": "The challenge issued by a DFSP that must be answered by the PISP\n",
        "properties": {
          "payload": {
            "type": "string",
            "description": "Base64 encoded binary of the challenge that must be answered by the PISP"
          },
          "signature": {
            "type": "string",
            "description": "Base64 enoded binary string or result of the payload signed by the PISP using the private key"
          }
        },
        "required": [
          "payload"
        ]
      },
      "CredentialStatusEnum": {
        "title": "CredentialStatus",
        "type": "string",
        "enum": [
          "PENDING",
          "ACTIVE"
        ],
        "description": "The status of the Credential's creation\n- \"PENDING\" - The PISP has requested a challenge, or the challenge has initialized but not yet answered by the PISP\n- \"ACTIVE\" - The Credential is valid, and ready to be used by the PISP\n"
      },
      "CredentialTypeEnum": {
        "title": "CredentialTypeEnum",
        "type": "string",
        "enum": [
          "FIDO"
        ],
        "description": "The type of the Credential\n- \"FIDO\" - A FIDO public/private keypair\n"
      },
      "Scope": {
        "title": "Scope",
        "type": "object",
        "description": "Scope + Account Identifier mapping for a Consent",
        "properties": {
          "scope": {
            "$ref": "#/components/schemas/AuthScopesEnum"
          },
          "accountId": {
            "$ref": "#/components/schemas/AccountId"
          }
        },
        "required": [
          "scope",
          "accountId"
        ]
      },
      "ThirdPartyAuthorizationRequest": {
        "title": "ThirdPartyAuthorizationRequest",
        "type": "object",
        "description": "The Request object for verifying an authorization",
        "properties": {
          "challenge": {
            "type": "string",
            "description": "The original Challenge Object as a JSON string"
          }
        },
        "required": [
          "challenge"
        ]
      },
      "Amount": {
        "title": "Amount",
        "type": "string",
        "pattern": "^([0]|([1-9][0-9]{0,17}))([.][0-9]{0,3}[1-9])?$",
        "description": "The API data type Amount is a JSON String in a canonical format that is restricted by a regular expression for interoperability reasons. This pattern does not allow any trailing zeroes at all, but allows an amount without a minor currency unit. It also only allows four digits in the minor currency unit; a negative value is not allowed. Using more than 18 digits in the major currency unit is not allowed."
      },
      "AmountType": {
        "title": "AmountType",
        "type": "string",
        "enum": [
          "SEND",
          "RECEIVE"
        ],
        "description": "Below are the allowed values for the enumeration AmountType.\n- SEND - Amount the Payer would like to send, that is, the amount that should be withdrawn from the Payer account including any fees.\n\n- RECEIVE - Amount the Payer would like the Payee to receive, that is, the amount that should be sent to the receiver exclusive of any fees."
      },
      "AuthenticationInfo": {
        "title": "AuthenticationInfo",
        "type": "object",
        "description": "Data model for the complex type AuthenticationInfo.",
        "properties": {
          "authentication": {
            "$ref": "#/components/schemas/AuthenticationType",
            "description": "Type of authentication.",
            "example": "OTP"
          },
          "authenticationValue": {
            "$ref": "#/components/schemas/AuthenticationValue",
            "description": "Authentication value.",
            "example": 1234
          }
        },
        "required": [
          "authentication",
          "authenticationValue"
        ]
      },
      "AuthenticationType": {
        "title": "AuthenticationType",
        "type": "string",
        "enum": [
          "OTP",
          "QRCODE"
        ],
        "description": "Below are the allowed values for the enumeration AuthenticationType.\n- OTP - One-time password generated by the Payer FSP.\n\n- QRCODE - QR code used as One Time Password."
      },
      "AuthenticationValue": {
        "title": "AuthenticationValue",
        "oneOf": [
          {
            "$ref": "#/components/schemas/OtpValue"
          },
          {
            "$ref": "#/components/schemas/QRCODE"
          }
        ],
        "pattern": "^\\d{3,10}$|^\\S{1,64}$",
        "description": "Contains the authentication value. The format depends on the authentication type used in the AuthenticationInfo complex type."
      },
      "AuthorizationResponse": {
        "title": "AuthorizationResponse",
        "type": "string",
        "enum": [
          "ENTERED",
          "REJECTED",
          "RESEND"
        ],
        "description": "Below are the allowed values for the enumeration.\n- ENTERED - Consumer entered the authentication value.\n\n- REJECTED - Consumer rejected the transaction.\n\n- RESEND - Consumer requested to resend the authentication value."
      },
      "AuthorizationsIDPutResponse": {
        "title": "AuthorizationsIDPutResponse",
        "type": "object",
        "description": "The object sent in the PUT /authorizations/{ID} callback.",
        "properties": {
          "authenticationInfo": {
            "$ref": "#/components/schemas/AuthenticationInfo",
            "description": "OTP or QR Code if entered, otherwise empty.",
            "example": "OTP"
          },
          "responseType": {
            "$ref": "#/components/schemas/AuthorizationResponse",
            "description": "Enum containing response information; if the customer entered the authentication value, rejected the transaction, or requested a resend of the authentication value.",
            "example": "ENTERED"
          }
        },
        "required": [
          "responseType"
        ]
      },
      "BalanceOfPayments": {
        "title": "BalanceOfPayments",
        "type": "string",
        "pattern": "^[1-9]\\d{2}$",
        "description": "(BopCode) The API data type [BopCode](https://www.imf.org/external/np/sta/bopcode/) is a JSON String of 3 characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed."
      },
      "BinaryString": {
        "type": "string",
        "pattern": "^[A-Za-z0-9-_]+[=]{0,2}$",
        "description": "The API data type BinaryString is a JSON String. The string is a base64url  encoding of a string of raw bytes, where padding (character ‘=’) is added at the end of the data if needed to ensure that the string is a multiple of 4 characters. The length restriction indicates the allowed number of characters."
      },
      "BinaryString32": {
        "type": "string",
        "pattern": "^[A-Za-z0-9-_]{43}$",
        "description": "The API data type BinaryString32 is a fixed size version of the API data type BinaryString, where the raw underlying data is always of 32 bytes. The data type BinaryString32 should not use a padding character as the size of the underlying data is fixed."
      },
      "BulkQuotesIDPutResponse": {
        "title": "BulkQuotesIDPutResponse",
        "type": "object",
        "description": "The object sent in the PUT /bulkQuotes/{ID} callback.",
        "properties": {
          "individualQuoteResults": {
            "type": "array",
            "maxItems": 1000,
            "items": {
              "$ref": "#/components/schemas/IndividualQuoteResult"
            },
            "description": "Fees for each individual transaction, if any of them are charged per transaction."
          },
          "expiration": {
            "$ref": "#/components/schemas/DateTime",
            "description": "Date and time until when the quotation is valid and can be honored when used in the subsequent transaction request.",
            "example": "2016-05-24T08:38:08.699-04:00"
          },
          "extensionList": {
            "$ref": "#/components/schemas/ExtensionList",
            "description": "Optional extension, specific to deployment."
          }
        },
        "required": [
          "expiration"
        ]
      },
      "BulkQuotesPostRequest": {
        "title": "BulkQuotesPostRequest",
        "type": "object",
        "description": "The object sent in the POST /bulkQuotes request.",
        "properties": {
          "bulkQuoteId": {
            "$ref": "#/components/schemas/CorrelationId",
            "description": "Common ID between the FSPs for the bulk quote object, decided by the Payer FSP. The ID should be reused for resends of the same bulk quote. A new ID should be generated for each new bulk quote.",
            "example": "b51ec534-ee48-4575-b6a9-ead2955b8069"
          },
          "payer": {
            "$ref": "#/components/schemas/Party"
          },
          "geoCode": {
            "$ref": "#/components/schemas/GeoCode",
            "description": "Longitude and Latitude of the initiating Party. Can be used to detect fraud."
          },
          "expiration": {
            "$ref": "#/components/schemas/DateTime",
            "description": "Expiration is optional to let the Payee FSP know when a quote no longer needs to be returned.",
            "example": "2016-05-24T08:38:08.699-04:00"
          },
          "individualQuotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IndividualQuote"
            },
            "minLength": 1,
            "maxLength": 1000
          },
          "extensionList": {
            "$ref": "#/components/schemas/ExtensionList",
            "description": "Optional extension, specific to deployment."
          }
        },
        "required": [
          "bulkQuoteId",
          "payer",
          "individualQuotes"
        ]
      },
      "BulkTransfersIDPutResponse": {
        "title": "BulkTransfersIDPutResponse",
        "type": "object",
        "description": "The object sent in the PUT /bulkTransfers/{ID} callback.",
        "properties": {
          "completedTimestamp": {
            "$ref": "#/components/schemas/DateTime",
            "description": "Time and date when the bulk transaction was completed.",
            "example": "2016-05-24T08:38:08.699-04:00"
          },
          "individualTransferResults": {
            "type": "array",
            "maxItems": 1000,
            "items": {
              "$ref": "#/components/schemas/IndividualTransferResult"
            },
            "description": "List of IndividualTransferResult elements."
          },
          "bulkTransferState": {
            "$ref": "#/components/schemas/BulkTransferState",
            "description": "The state of the bulk transfer.",
            "example": "RECEIVED"
          },
          "extensionList": {
            "$ref": "#/components/schemas/ExtensionList",
            "description": "Optional extension, specific to deployment."
          }
        },
        "required": [
          "bulkTransferState"
        ]
      },
      "BulkTransfersPostRequest": {
        "title": "BulkTransfersPostRequest",
        "type": "object",
        "description": "The object sent in the POST /bulkTransfers request.",
        "properties": {
          "bulkTransferId": {
            "$ref": "#/components/schemas/CorrelationId",
            "description": "Common ID between the FSPs and the optional Switch for the bulk transfer object, decided by the Payer FSP. The ID should be reused for resends of the same bulk transfer. A new ID should be generated for each new bulk transfer.",
            "example": "b51ec534-ee48-4575-b6a9-ead2955b8069"
          },
          "bulkQuoteId": {
            "$ref": "#/components/schemas/CorrelationId",
            "description": "ID of the related bulk quote.",
            "example": "b51ec534-ee48-4575-b6a9-ead2955b8069"
          },
          "payerFsp": {
            "$ref": "#/components/schemas/FspId",
            "description": "Payer FSP identifier.",
            "example": 5678
          },
          "payeeFsp": {
            "$ref": "#/components/schemas/FspId",
            "description": "Payee FSP identifier.",
            "example": 1234
          },
          "individualTransfers": {
            "type": "array",
            "minItems": 1,
            "maxItems": 1000,
            "items": {
              "$ref": "#/components/schemas/IndividualTransfer"
            },
            "description": "List of IndividualTransfer elements."
          },
          "expiration": {
            "$ref": "#/components/schemas/DateTime",
            "description": "Expiration time of the transfers.",
            "example": "2016-05-24T08:38:08.699-04:00"
          },
          "extensionList": {
            "$ref": "#/components/schemas/ExtensionList",
            "description": "Optional extension, specific to deployment."
          }
        },
        "required": [
          "bulkTransferId",
          "bulkQuoteId",
          "payerFsp",
          "payeeFsp",
          "individualTransfers",
          "expiration"
        ]
      },
      "BulkTransferState": {
        "title": "BulkTransactionState",
        "type": "string",
        "enum": [
          "RECEIVED",
          "PENDING",
          "ACCEPTED",
          "PROCESSING",
          "COMPLETED",
          "REJECTED"
        ],
        "description": "Below are the allowed values for the enumeration.\n- RECEIVED - Payee FSP has received the bulk transfer from the Payer FSP.\n\n- PENDING - Payee FSP has validated the bulk transfer.\n\n- ACCEPTED - Payee FSP has accepted to process the bulk transfer.\n\n- PROCESSING - Payee FSP has started to transfer fund to the Payees.\n\n- COMPLETED - Payee FSP has completed transfer of funds to the Payees.\n\n- REJECTED - Payee FSP has rejected to process the bulk transfer."
      },
      "Code": {
        "title": "Code",
        "type": "string",
        "pattern": "^[0-9a-zA-Z]{4,32}$",
        "description": "Any code/token returned by the Payee FSP (TokenCode Type)."
      },
      "CorrelationId": {
        "title": "CorrelationId",
        "type": "string",
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$",
        "description": "Identifier that correlates all messages of the same sequence. The API data type UUID (Universally Unique Identifier) is a JSON String in canonical format, conforming to [RFC 4122](https://tools.ietf.org/html/rfc4122), that is restricted by a regular expression for interoperability reasons. A UUID is always 36 characters long, 32 hexadecimal symbols and 4 dashes (‘-‘)."
      },
      "Currency": {
        "title": "Currency",
        "description": "The currency codes defined in [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter alphabetic codes are used as the standard naming representation for currencies.",
        "type": "string",
        "minLength": 3,
        "maxLength": 3,
        "enum": [
          "AED",
          "AFN",
          "ALL",
          "AMD",
          "ANG",
          "AOA",
          "ARS",
          "AUD",
          "AWG",
          "AZN",
          "BAM",
          "BBD",
          "BDT",
          "BGN",
          "BHD",
          "BIF",
          "BMD",
          "BND",
          "BOB",
          "BRL",
          "BSD",
          "BTN",
          "BWP",
          "BYN",
          "BZD",
          "CAD",
          "CDF",
          "CHF",
          "CLP",
          "CNY",
          "COP",
          "CRC",
          "CUC",
          "CUP",
          "CVE",
          "CZK",
          "DJF",
          "DKK",
          "DOP",
          "DZD",
          "EGP",
          "ERN",
          "ETB",
          "EUR",
          "FJD",
          "FKP",
          "GBP",
          "GEL",
          "GGP",
          "GHS",
          "GIP",
          "GMD",
          "GNF",
          "GTQ",
          "GYD",
          "HKD",
          "HNL",
          "HRK",
          "HTG",
          "HUF",
          "IDR",
          "ILS",
          "IMP",
          "INR",
          "IQD",
          "IRR",
          "ISK",
          "JEP",
          "JMD",
          "JOD",
          "JPY",
          "KES",
          "KGS",
          "KHR",
          "KMF",
          "KPW",
          "KRW",
          "KWD",
          "KYD",
          "KZT",
          "LAK",
          "LBP",
          "LKR",
          "LRD",
          "LSL",
          "LYD",
          "MAD",
          "MDL",
          "MGA",
          "MKD",
          "MMK",
          "MNT",
          "MOP",
          "MRO",
          "MUR",
          "MVR",
          "MWK",
          "MXN",
          "MYR",
          "MZN",
          "NAD",
          "NGN",
          "NIO",
          "NOK",
          "NPR",
          "NZD",
          "OMR",
          "PAB",
          "PEN",
          "PGK",
          "PHP",
          "PKR",
          "PLN",
          "PYG",
          "QAR",
          "RON",
          "RSD",
          "RUB",
          "RWF",
          "SAR",
          "SBD",
          "SCR",
          "SDG",
          "SEK",
          "SGD",
          "SHP",
          "SLL",
          "SOS",
          "SPL",
          "SRD",
          "STD",
          "SVC",
          "SYP",
          "SZL",
          "THB",
          "TJS",
          "TMT",
          "TND",
          "TOP",
          "TRY",
          "TTD",
          "TVD",
          "TWD",
          "TZS",
          "UAH",
          "UGX",
          "USD",
          "UYU",
          "UZS",
          "VEF",
          "VND",
          "VUV",
          "WST",
          "XAF",
          "XCD",
          "XDR",
          "XOF",
          "XPF",
          "YER",
          "ZAR",
          "ZMW",
          "ZWD"
        ]
      },
      "Date": {
        "title": "Date",
        "type": "string",
        "pattern": "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$",
        "description": "The API data type Date is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.\nThis format, as specified in ISO 8601, contains a date only. A more readable version of the format is yyyy-MM-dd. Examples are \"1982-05-23\", \"1987-08-05”."
      },
      "DateOfBirth": {
        "title": "DateofBirth (type Date)",
        "type": "string",
        "pattern": "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)$",
        "description": "Date of Birth of the Party."
      },
      "DateTime": {
        "title": "DateTime",
        "type": "string",
        "pattern": "^(?:[1-9]\\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d(?:(\\.\\d{3}))(?:Z|[+-][01]\\d:[0-5]\\d)$",
        "description": "The API data type DateTime is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons.\nThe format is according to [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed in a combined date, time and time zone format. A more readable version of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are \"2016-05-24T08:38:08.699-04:00\", \"2016-05-24T08:38:08.699Z\" (where Z indicates Zulu time zone, same as UTC)."
      },
      "ErrorCode": {
        "title": "ErrorCode",
        "type": "string",
        "pattern": "^[1-9]\\d{3}$",
        "description": "The API data type ErrorCode is a JSON String of four characters, consisting of digits only. Negative numbers are not allowed. A leading zero is not allowed. Each error code in the API is a four-digit number, for example, 1234, where the first number (1 in the example) represents the high-level error category, the second number (2 in the example) represents the low-level error category, and the last two numbers (34 in the example) represent the specific error."
      },
      "ErrorDescription": {
        "title": "ErrorDescription",
        "type": "string",
        "minLength": 1,
        "maxLength": 128,
        "description": "Error description string."
      },
      "ErrorInformation": {
        "title": "ErrorInformation",
        "type": "object",
        "description": "Data model for the complex type ErrorInformation.",
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/ErrorCode",
            "description": "Specific error number.",
            "example": 5100
          },
          "errorDescription": {
            "$ref": "#/components/schemas/ErrorDescription",
            "description": "Error description string.",
            "example": "This is an error description."
          },
          "extensionList": {
            "$ref": "#/components/schemas/ExtensionList"
          }
        },
        "required": [
          "errorCode",
          "errorDescription"
        ]
      },
      "ErrorInformationObject": {
        "title": "ErrorInformationObject",
        "type": "object",
        "description": "Data model for the complex type object that contains ErrorInformation.",
        "properties": {
          "errorInformation": {
            "$ref": "#/components/schemas/ErrorInformation"
          }
        },
        "required": [
          "errorInformation"
        ]
      },
      "ErrorInformationResponse": {
        "title": "ErrorInformationResponse",
        "type": "object",
        "description": "Data model for the complex type object that contains an optional element ErrorInformation used along with 4xx and 5xx responses.",
        "properties": {
          "errorInformation": {
            "$ref": "#/components/schemas/ErrorInformation"
          }
        }
      },
      "Extension": {
        "title": "Extension",
        "type": "object",
        "description": "Data model for the complex type Extension.",
        "properties": {
          "key": {
            "$ref": "#/components/schemas/ExtensionKey",
            "description": "Extension key."
          },
          "value": {
            "$ref": "#/components/schemas/ExtensionValue",
            "description": "Extension value."
          }
        },
        "required": [
          "key",
          "value"
        ]
      },
      "ExtensionKey": {
        "title": "ExtensionKey",
        "type": "string",
        "minLength": 1,
        "maxLength": 32,
        "description": "Extension key."
      },
      "ExtensionList": {
        "title": "ExtensionList",
        "type": "object",
        "description": "Data model for the complex type ExtensionList. An optional list of extensions, specific to deployment.",
        "properties": {
          "extension": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Extension"
            },
            "minItems": 1,
            "maxItems": 16,
            "description": "Number of Extension elements."
          }
        },
        "required": [
          "extension"
        ]
      },
      "ExtensionValue": {
        "title": "ExtensionValue",
        "type": "string",
        "minLength": 1,
        "maxLength": 128,
        "description": "Extension value."
      },
      "FirstName": {
        "title": "FirstName",
        "type": "string",
        "minLength": 1,
        "maxLength": 128,
        "pattern": "^(?!\\s*$)[\\p{L}\\p{Nd} .,'-]{1,128}$",
        "description": "First name of the Party (Name Type)."
      },
      "FspId": {
        "title": "FspId",
        "type": "string",
        "minLength": 1,
        "maxLength": 32,
        "description": "FSP identifier."
      },
      "GeoCode": {
        "title": "GeoCode",
        "type": "object",
        "description": "Data model for the complex type GeoCode. Indicates the geographic location from where the transaction was initiated.",
        "properties": {
          "latitude": {
            "$ref": "#/components/schemas/Latitude",
            "description": "Latitude of the Party.",
            "example": "+45.4215"
          },
          "longitude": {
            "$ref": "#/components/schemas/Longitude",
            "description": "Longitude of the Party.",
            "example": "+75.6972"
          }
        },
        "required": [
          "latitude",
          "longitude"
        ]
      },
      "IlpCondition": {
        "title": "IlpCondition",
        "type": "string",
        "pattern": "^[A-Za-z0-9-_]{43}$",
        "maxLength": 48,
        "description": "Condition that must be attached to the transfer by the Payer."
      },
      "IlpFulfilment": {
        "title": "IlpFulfilment",
        "type": "string",
        "pattern": "^[A-Za-z0-9-_]{43}$",
        "maxLength": 48,
        "description": "Fulfilment that must be attached to the transfer by the Payee."
      },
      "IlpPacket": {
        "title": "IlpPacket",
        "type": "string",
        "pattern": "^[A-Za-z0-9-_]+[=]{0,2}$",
        "minLength": 1,
        "maxLength": 32768,
        "description": "Information for recipient (transport layer information)."
      },
      "IndividualQuote": {
        "title": "IndividualQuote",
        "type": "object",
        "description": "Data model for the complex type IndividualQuote.",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/CorrelationId",
            "description": "Identifies the quote message.",
            "example": "b51ec534-ee48-4575-b6a9-ead2955b8069"
          },
          "transactionId": {
            "$ref": "#/components/schemas/CorrelationId",
            "description": "Identifies the transaction message.",
            "example": "b51ec534-ee48-4575-b6a9-ead2955b8069"
          },
          "payee": {
            "$ref": "#/components/schemas/Party",
            "description": "Information about the Payee in the proposed financial transaction."
          },
          "amountType": {
            "$ref": "#/components/schemas/AmountType",
            "description": "SEND for sendAmount, RECEIVE for receiveAmount.",
            "example": "RECEIVE"
          },
          "amount": {
            "$ref": "#/components/schemas/Money"
          },
          "fees": {
            "$ref": "#/components/schemas/Money"
          },
          "transactionType": {
            "$ref": "#/components/schemas/TransactionType",
            "description": "Type of transaction that the quote is requested for."
          },
          "note": {
            "$ref": "#/components/schemas/Note",
            "description": "Memo that will be attached to the transaction.",
            "example": "Note sent to Payee."
          },
          "extensionList": {
            "$ref": "#/components/schemas/ExtensionList",
            "description": "Optional extension, specific to deployment."
          }
        },
        "required": [
          "quoteId",
          "transactionId",
          "payee",
          "amountType",
          "amount",
          "transactionType"
        ]
      },
      "IndividualQuoteResult": {
        "title": "IndividualQuoteResult",
        "type": "object",
        "description": "Data model for the complex type IndividualQuoteResult.",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/CorrelationId",
            "description": "Identifies the quote message.",
            "example": "b51ec534-ee48-4575-b6a9-ead2955b8069"
          },
          "payee": {
            "$ref": "#/components/schemas/Party",
            "description": "Information about the Payee in the proposed financial transaction."
          },
          "transferAmount": {
            "$ref": "#/components/schemas/Money"
          },
          "payeeReceiveAmount": {
            "$ref": "#/components/schemas/Money"
          },
          "payeeFspFee": {
            "$ref": "#/components/schemas/Money"
          },
          "payeeFspCommission": {
            "$ref": "#/components/schemas/Money"
          },
          "ilpPacket": {
            "$ref": "#/components/schemas/IlpPacket",
            "description": "The ILP Packet that must be attached to the transfer by the Payer.",
            "example": "AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA"
          },
          "condition": {
            "$ref": "#/components/schemas/IlpCondition",
            "description": "The condition that must be attached to the transfer by the Payer.",
            "example": "f5sqb7tBTWPd5Y8BDFdMm9BJR_MNI4isf8p8n4D5pHA"
          },
          "errorInformation": {
            "$ref": "#/components/schemas/ErrorInformation",
            "description": "Error code, category description. **Note:** receiveAmount, payeeFspFee, payeeFspCommission, expiration, ilpPacket, condition should not be set if errorInformation is set."
          },
          "extensionList": {
            "$ref": "#/components/schemas/ExtensionList",
            "description": "Optional extension, specific to deployment."
          }
        },
        "required": [
          "quoteId"
        ]
      },
      "IndividualTransfer": {
        "title": "IndividualTransfer",
        "type": "object",
        "description": "Data model for the complex type IndividualTransfer.",
        "properties": {
          "transferId": {
            "$ref": "#/components/schemas/CorrelationId",
            "description": "Identifies messages related to the same /transfers sequence.",
            "example": "b51ec534-ee48-4575-b6a9-ead2955b8069"
          },
          "transferAmount": {
            "$ref": "#/components/schemas/Money",
            "description": "Transaction amount to be sent."
          },
          "ilpPacket": {
            "$ref": "#/components/schemas/IlpPacket",
            "description": "ILP Packet containing the amount delivered to the Payee and the ILP Address of the Payee and any other end-to-end data.",
            "example": "AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA"
          },
          "condition": {
            "$ref": "#/components/schemas/IlpCondition",
            "description": "Condition that must be fulfilled to commit the transfer.",
            "example": "f5sqb7tBTWPd5Y8BDFdMm9BJR_MNI4isf8p8n4D5pHA"
          },
          "extensionList": {
            "$ref": "#/components/schemas/ExtensionList",
            "description": "Optional extension, specific to deployment."
          }
        },
        "required": [
          "transferId",
          "transferAmount",
          "ilpPacket",
          "condition"
        ]
      },
      "IndividualTransferResult": {
        "title": "IndividualTransferResult",
        "type": "object",
        "description": "Data model for the complex type IndividualTransferResult.",
        "properties": {
          "transferId": {
            "$ref": "#/components/schemas/CorrelationId",
            "description": "Identifies messages related to the same /transfers sequence.",
            "example": "b51ec534-ee48-4575-b6a9-ead2955b8069"
          },
          "fulfilment": {
            "$ref": "#/components/schemas/IlpFulfilment",
            "description": "Fulfilment of the condition specified with the transaction. **Note:** Either fulfilment or errorInformation should be set, not both.",
            "example": "WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8"
          },
          "errorInformation": {
            "$ref": "#/components/schemas/ErrorInformation",
            "description": "If transfer is REJECTED, error information may be provided. **Note:** Either fulfilment or errorInformation should be set, not both."
          },
          "extensionList": {
            "$ref": "#/components/schemas/ExtensionList",
            "description": "Optional extension, specific to deployment."
          }
        },
        "required": [
          "transferId"
        ]
      },
      "Integer": {
        "title": "Integer",
        "type": "string",
        "pattern": "^[1-9]\\d*$",
        "description": "The API data type Integer is a JSON String consisting of digits only. Negative numbers and leading zeroes are not allowed. The data type is always limited to a specific number of digits."
      },
      "LastName": {
        "title": "LastName",
        "type": "string",
        "minLength": 1,
        "maxLength": 128,
        "pattern": "^(?!\\s*$)[\\p{L}\\p{Nd} .,'-]{1,128}$",
        "description": "Last name of the Party (Name Type)."
      },
      "Latitude": {
        "title": "Latitude",
        "type": "string",
        "pattern": "^(\\+|-)?(?:90(?:(?:\\.0{1,6})?)|(?:[0-9]|[1-8][0-9])(?:(?:\\.[0-9]{1,6})?))$",
        "description": "The API data type Latitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons."
      },
      "Longitude": {
        "title": "Longitude",
        "type": "string",
        "pattern": "^(\\+|-)?(?:180(?:(?:\\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\\.[0-9]{1,6})?))$",
        "description": "The API data type Longitude is a JSON String in a lexical format that is restricted by a regular expression for interoperability reasons."
      },
      "MerchantClassificationCode": {
        "title": "MerchantClassificationCode",
        "type": "string",
        "pattern": "^[\\d]{1,4}$",
        "description": "A limited set of pre-defined numbers. This list would be a limited set of numbers identifying a set of popular merchant types like School Fees, Pubs and Restaurants, Groceries, etc."
      },
      "MiddleName": {
        "title": "MiddleName",
        "type": "string",
        "minLength": 1,
        "maxLength": 128,
        "pattern": "^(?!\\s*$)[\\p{L}\\p{Nd} .,'-]{1,128}$",
        "description": "Middle name of the Party (Name Type)."
      },
      "Money": {
        "title": "Money",
        "type": "object",
        "description": "Data model for the complex type Money.",
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/Currency",
            "description": "Currency of the amount.",
            "example": "USD"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount",
            "description": "Amount of Money.",
            "example": 123.45
          }
        },
        "required": [
          "currency",
          "amount"
        ]
      },
      "Name": {
        "title": "Name",
        "type": "string",
        "pattern": "^(?!\\s*$)[\\p{L}\\p{Nd} .,'-]{1,128}$",
        "description": "The API data type Name is a JSON String, restricted by a regular expression to avoid characters which are generally not used in a name.\nRegular Expression - The regular expression for restricting the Name type is \"^(?!\\s*$)[\\w .,'-]{1,128}$\". The restriction does not allow a string consisting of whitespace only, all Unicode characters are allowed, as well as the period (.) (apostrophe (‘), dash (-), comma (,) and space characters ( ).\n\n\n**Note:** In some programming languages, Unicode support must be specifically enabled. For example, if Java is used, the flag UNICODE_CHARACTER_CLASS must be enabled to allow Unicode characters."
      },
      "Note": {
        "title": "Note",
        "type": "string",
        "minLength": 1,
        "maxLength": 128,
        "description": "Memo assigned to transaction."
      },
      "OtpValue": {
        "title": "OtpValue",
        "type": "string",
        "pattern": "^\\d{3,10}$",
        "description": "The API data type OtpValue is a JSON String of 3 to 10 characters, consisting of digits only. Negative numbers are not allowed. One or more leading zeros are allowed."
      },
      "ParticipantsIDPutResponse": {
        "title": "ParticipantsIDPutResponse",
        "type": "object",
        "description": "The object sent in the PUT /participants/{ID} callback.",
        "properties": {
          "partyList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartyResult"
            },
            "minItems": 1,
            "maxItems": 10000,
            "description": "List of PartyResult elements that were either created or failed to be created."
          },
          "currency": {
            "$ref": "#/components/schemas/Currency",
            "description": "Indicate that the provided Currency was set to be supported by each successfully added PartyIdInfo.",
            "example": "USD"
          }
        },
        "required": [
          "partyList"
        ]
      },
      "ParticipantsPostRequest": {
        "title": "ParticipantsPostRequest",
        "type": "object",
        "description": "The object sent in the POST /participants request.",
        "properties": {
          "requestId": {
            "$ref": "#/components/schemas/CorrelationId",
            "description": "The ID of the request, decided by the client. Used for identification of the callback from the server.",
            "example": "b51ec534-ee48-4575-b6a9-ead2955b8069"
          },
          "partyList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PartyIdInfo"
            },
            "minItems": 1,
            "maxItems": 10000,
            "description": "List of PartyIdInfo elements that the client would like to update or create FSP information about."
          },
          "currency": {
            "$ref": "#/components/schemas/Currency",
            "description": "Indicate that the provided Currency is supported by each PartyIdInfo in the list.",
            "example": "USD"
          }
        },
        "required": [
          "requestId",
          "partyList"
        ]
      },
      "ParticipantsTypeIDPutResponse": {
        "title": "ParticipantsTypeIDPutResponse",
        "type": "object",
        "description": "The object sent in the PUT /participants/{Type}/{ID}/{SubId} and /participants/{Type}/{ID} callbacks.",
        "properties": {
          "fspId": {
            "$ref": "#/components/schemas/FspId",
            "description": "FSP Identifier that the Party belongs to.",
            "example": 1234
          }
        }
      },
      "ParticipantsTypeIDSubIDPostRequest": {
        "title": "ParticipantsTypeIDSubIDPostRequest",
        "type": "object",
        "description": "The object sent in the POST /participants/{Type}/{ID}/{SubId} and /participants/{Type}/{ID} requests.",
        "properties": {
          "fspId": {
            "$ref": "#/components/schemas/FspId",
            "description": "FSP Identifier that the Party belongs to.",
            "example": 1234
          },
          "currency": {
            "$ref": "#/components/schemas/Currency",
            "description": "Indicate that the provided Currency is supported by the Party.",
            "example": "USD"
          }
        },
        "required": [
          "fspId"
        ]
      },
      "PartiesTypeIDPutResponse": {
        "title": "PartiesTypeIDPutResponse",
        "type": "object",
        "description": "The object sent in the PUT /parties/{Type}/{ID} callback.",
        "properties": {
          "party": {
            "$ref": "#/components/schemas/Party",
            "description": "Information regarding the requested Party."
          }
        },
        "required": [
          "party"
        ]
      },
      "Party": {
        "title": "Party",
        "type": "object",
        "description": "Data model for the complex type Party.",
        "properties": {
          "partyIdInfo": {
            "$ref": "#/components/schemas/PartyIdInfo",
            "description": "Party Id type, id, sub ID or type, and FSP Id."
          },
          "merchantClassificationCode": {
            "$ref": "#/components/schemas/MerchantClassificationCode",
            "description": "Used in the context of Payee Information, where the Payee happens to be a merchant accepting merchant payments.",
            "example": 4321
          },
          "name": {
            "$ref": "#/components/schemas/PartyName",
            "description": "Display name of the Party, could be a real name or a nick name.",
            "example": "Henrik Karlsson"
          },
          "personalInfo": {
            "$ref": "#/components/schemas/PartyPersonalInfo",
            "description": "Personal information used to verify identity of Party such as first, middle, last name and date of birth."
          }
        },
        "required": [
          "partyIdInfo"
        ]
      },
      "PartyComplexName": {
        "title": "PartyComplexName",
        "type": "object",
        "description": "Data model for the complex type PartyComplexName.",
        "properties": {
          "firstName": {
            "$ref": "#/components/schemas/FirstName",
            "description": "Party’s first name.",
            "example": "Henrik"
          },
          "middleName": {
            "$ref": "#/components/schemas/MiddleName",
            "description": "Party’s middle name.",
            "example": "Johannes"
          },
          "lastName": {
            "$ref": "#/components/schemas/LastName",
            "description": "Party’s last name.",
            "example": "Karlsson"
          }
        }
      },
      "PartyIdentifier": {
        "title": "PartyIdentifier",
        "type": "string",
        "minLength": 1,
        "maxLength": 128,
        "description": "Identifier of the Party."
      },
      "PartyIdInfo": {
        "title": "PartyIdInfo",
        "type": "object",
        "description": "Data model for the complex type PartyIdInfo.",
        "properties": {
          "partyIdType": {
            "$ref": "#/components/schemas/PartyIdType",
            "description": "Type of the identifier.",
            "example": "PERSONAL_ID"
          },
          "partyIdentifier": {
            "$ref": "#/components/schemas/PartyIdentifier",
            "description": "An identifier for the Party.",
            "example": 16135551212
          },
          "partySubIdOrType": {
            "$ref": "#/components/schemas/PartySubIdOrType",
            "description": "A sub-identifier or sub-type for the Party.",
            "example": "DRIVING_LICENSE"
          },
          "fspId": {
            "$ref": "#/components/schemas/FspId",
            "description": "FSP ID (if known).",
            "example": 1234
          }
        },
        "required": [
          "partyIdType",
          "partyIdentifier"
        ]
      },
      "PartyIdType": {
        "title": "PartyIdType",
        "type": "string",
        "enum": [
          "MSISDN",
          "EMAIL",
          "PERSONAL_ID",
          "BUSINESS",
          "DEVICE",
          "ACCOUNT_ID",
          "IBAN",
          "ALIAS"
        ],
        "description": "Below are the allowed values for the enumeration.\n- MSISDN - An MSISDN (Mobile Station International Subscriber Directory Number, that is, the phone number) is used as reference to a participant. The MSISDN identifier should be in international format according to the [ITU-T E.164 standard](https://www.itu.int/rec/T-REC-E.164/en). Optionally, the MSISDN may be prefixed by a single plus sign, indicating the international prefix.\n\n- EMAIL - An email is used as reference to a participant. The format of the email should be according to the informational [RFC 3696](https://tools.ietf.org/html/rfc3696).\n\n- PERSONAL_ID - A personal identifier is used as reference to a participant. Examples of personal identification are passport number, birth certificate number, and national registration number. The identifier number is added in the PartyIdentifier element. The personal identifier type is added in the PartySubIdOrType element.\n\n- BUSINESS - A specific Business (for example, an organization or a company) is used as reference to a participant. The BUSINESS identifier can be in any format. To make a transaction connected to a specific username or bill number in a Business, the PartySubIdOrType element should be used.\n\n- DEVICE - A specific device (for example, a POS or ATM) ID connected to a specific business or organization is used as reference to a Party. For referencing a specific device under a specific business or organization, use the PartySubIdOrType element.\n\n- ACCOUNT_ID - A bank account number or FSP account ID should be used as reference to a participant. The ACCOUNT_ID identifier can be in any format, as formats can greatly differ depending on country and FSP.\n\n- IBAN - A bank account number or FSP account ID is used as reference to a participant. The IBAN identifier can consist of up to 34 alphanumeric characters and should be entered without whitespace.\n\n- ALIAS An alias is used as reference to a participant. The alias should be created in the FSP as an alternative reference to an account owner. Another example of an alias is a username in the FSP system. The ALIAS identifier can be in any format. It is also possible to use the PartySubIdOrType element for identifying an account under an Alias defined by the PartyIdentifier."
      },
      "PartyName": {
        "title": "PartyName",
        "type": "string",
        "minLength": 1,
        "maxLength": 128,
        "description": "Name of the Party. Could be a real name or a nickname."
      },
      "PartyPersonalInfo": {
        "title": "PartyPersonalInfo",
        "type": "object",
        "description": "Data model for the complex type PartyPersonalInfo.",
        "properties": {
          "complexName": {
            "$ref": "#/components/schemas/PartyComplexName",
            "description": "First, middle and last name for the Party."
          },
          "dateOfBirth": {
            "$ref": "#/components/schemas/DateOfBirth",
            "description": "Date of birth for the Party.",
            "example": "1966-06-16"
          }
        }
      },
      "PartyResult": {
        "title": "PartyResult",
        "type": "object",
        "description": "Data model for the complex type PartyResult.",
        "properties": {
          "partyId": {
            "$ref": "#/components/schemas/PartyIdInfo",
            "description": "Party Id type, id, sub ID or type, and FSP Id."
          },
          "errorInformation": {
            "$ref": "#/components/schemas/ErrorInformation",
            "description": "If the Party failed to be added, error information should be provided. Otherwise, this parameter should be empty to indicate success."
          }
        },
        "required": [
          "partyId"
        ]
      },
      "PartySubIdOrType": {
        "title": "PartySubIdOrType",
        "type": "string",
        "minLength": 1,
        "maxLength": 128,
        "description": "Either a sub-identifier of a PartyIdentifier, or a sub-type of the PartyIdType, normally a PersonalIdentifierType."
      },
      "PersonalIdentifierType": {
        "title": "PersonalIdentifierType",
        "type": "string",
        "enum": [
          "PASSPORT",
          "NATIONAL_REGISTRATION",
          "DRIVING_LICENSE",
          "ALIEN_REGISTRATION",
          "NATIONAL_ID_CARD",
          "EMPLOYER_ID",
          "TAX_ID_NUMBER",
          "SENIOR_CITIZENS_CARD",
          "MARRIAGE_CERTIFICATE",
          "HEALTH_CARD",
          "VOTERS_ID",
          "UNITED_NATIONS",
          "OTHER_ID"
        ],
        "description": "Below are the allowed values for the enumeration.\n- PASSPORT - A passport number is used as reference to a Party.\n\n- NATIONAL_REGISTRATION - A national registration number is used as reference to a Party.\n\n- DRIVING_LICENSE - A driving license is used as reference to a Party.\n\n- ALIEN_REGISTRATION - An alien registration number is used as reference to a Party.\n\n- NATIONAL_ID_CARD - A national ID card number is used as reference to a Party.\n\n- EMPLOYER_ID - A tax identification number is used as reference to a Party.\n\n- TAX_ID_NUMBER - A tax identification number is used as reference to a Party.\n\n- SENIOR_CITIZENS_CARD - A senior citizens card number is used as reference to a Party.\n\n- MARRIAGE_CERTIFICATE - A marriage certificate number is used as reference to a Party.\n\n- HEALTH_CARD - A health card number is used as reference to a Party.\n\n- VOTERS_ID - A voter’s identification number is used as reference to a Party.\n\n- UNITED_NATIONS - An UN (United Nations) number is used as reference to a Party.\n\n- OTHER_ID - Any other type of identification type number is used as reference to a Party."
      },
      "QRCODE": {
        "title": "QRCODE",
        "type": "string",
        "minLength": 1,
        "maxLength": 64,
        "description": "QR code used as a One Time Password."
      },
      "QuotesIDPutResponse": {
        "title": "QuotesIDPutResponse",
        "type": "object",
        "description": "The object sent in the PUT /quotes/{ID} callback.",
        "properties": {
          "transferAmount": {
            "$ref": "#/components/schemas/Money"
          },
          "payeeReceiveAmount": {
            "$ref": "#/components/schemas/Money"
          },
          "payeeFspFee": {
            "$ref": "#/components/schemas/Money"
          },
          "payeeFspCommission": {
            "$ref": "#/components/schemas/Money"
          },
          "expiration": {
            "$ref": "#/components/schemas/DateTime",
            "description": "Date and time until when the quotation is valid and can be honored when used in the subsequent transaction.",
            "example": "2016-05-24T08:38:08.699-04:00"
          },
          "geoCode": {
            "$ref": "#/components/schemas/GeoCode",
            "description": "Longitude and Latitude of the Payee. Can be used to detect fraud."
          },
          "ilpPacket": {
            "$ref": "#/components/schemas/IlpPacket",
            "description": "The ILP Packet that must be attached to the transfer by the Payer.",
            "example": "“AYIBgQAAAAAAAASwNGxldmVsb25lLmRmc3AxLm1lci45T2RTOF81MDdqUUZERmZlakgyOVc4bXFmNEpLMHlGTFGCAUBQU0svMS4wCk5vbmNlOiB1SXlweUYzY3pYSXBFdzVVc05TYWh3CkVuY3J5cHRpb246IG5vbmUKUGF5bWVudC1JZDogMTMyMzZhM2ItOGZhOC00MTYzLTg0NDctNGMzZWQzZGE5OGE3CgpDb250ZW50LUxlbmd0aDogMTM1CkNvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvbgpTZW5kZXItSWRlbnRpZmllcjogOTI4MDYzOTEKCiJ7XCJmZWVcIjowLFwidHJhbnNmZXJDb2RlXCI6XCJpbnZvaWNlXCIsXCJkZWJpdE5hbWVcIjpcImFsaWNlIGNvb3BlclwiLFwiY3JlZGl0TmFtZVwiOlwibWVyIGNoYW50XCIsXCJkZWJpdElkZW50aWZpZXJcIjpcIjkyODA2MzkxXCJ9IgA”"
          },
          "condition": {
            "$ref": "#/components/schemas/IlpCondition",
            "description": "The condition that must be attached to the transfer by the Payer.",
            "example": "f5sqb7tBTWPd5Y8BDFdMm9BJR_MNI4isf8p8n4D5pHA"
          },
          "extensionList": {
            "$ref": "#/components/schemas/ExtensionList",
            "description": "Optional extension, specific to deployment."
          }
        },
        "required": [
          "transferAmount",
          "expiration",
          "ilpPacket",
          "condition"
        ]
      },
      "QuotesPostRequest": {
        "title": "QuotesPostRequest",
        "type": "object",
        "description": "The object sent in the POST /quotes request.",
        "properties": {
          "quoteId": {
            "$ref": "#/components/schemas/CorrelationId",
            "description": "Common ID between the FSPs for the quote object, decided by the Payer FSP. The ID should be reused for resends of the same quote for a transaction. A new ID should be generated for each new quote for a transaction.",
            "example": "b51ec534-ee48-4575-b6a9-ead2955b8069"
          },
          "transactionId": {
            "$ref": "#/components/schemas/CorrelationId",
            "description": "Common ID (decided by the Payer FSP) between the FSPs for the future transaction object. The actual transaction will be created as part of a successful transfer process. The ID should be reused for resends of the same quote for a transaction. A new ID should be generated for each new quote for a transaction.",
            "example": "a8323bc6-c228-4df2-ae82-e5a997baf899"
          },
          "transactionRequestId": {
            "$ref": "#/components/schemas/CorrelationId",
            "description": "Identifies an optional previously-sent transaction request.",
            "example": "a8323bc6-c228-4df2-ae82-e5a997baf890"
          },
          "payee": {
            "$ref": "#/components/schemas/Party",
            "description": "Information about the Payee in the proposed financial transaction."
          },
          "payer": {
            "$ref": "#/components/schemas/Party",
            "description": "Information about the Payer in the proposed financial transaction."
          },
          "amountType": {
            "$ref": "#/components/schemas/AmountType",
            "description": "SEND for send amount, RECEIVE for receive amount.",
            "example": "SEND"
          },
          "amount": {
            "$ref": "#/components/schemas/Money"
          },
          "fees": {
            "$ref": "#/components/schemas/Money"
          },
          "transactionType": {
            "$ref": "#/components/schemas/TransactionType",
            "description": "Type of transaction for which the quote is requested."
          },
          "geoCode": {
            "$ref": "#/components/schemas/GeoCode",
            "description": "Longitude and Latitude of the initiating Party. Can be used to detect fraud."
          },
          "note": {
            "$ref": "#/components/schemas/Note",
            "description": "A memo that will be attached to the transaction.",
            "example": "Free-text memo."
          },
          "expiration": {
            "$ref": "#/components/schemas/DateTime",
            "description": "Expiration is optional. It can be set to get a quick failure in case the peer FSP takes too long to respond. Also, it may be beneficial for Consumer, Agent, and Merchant to know that their request has a time limit.",
            "example": "2016-05-24T08:38:08.699-04:00"
          },
          "extensionList": {
            "$ref": "#/components/schemas/ExtensionList",
            "description": "Optional extension, specific to deployment."
          }
        },
        "required": [
          "quoteId",
          "transactionId",
          "payee",
          "payer",
          "amountType",
          "amount",
          "transactionType"
        ]
      },
      "Refund": {
        "title": "Refund",
        "type": "object",
        "description": "Data model for the complex type Refund.",
        "properties": {
          "originalTransactionId": {
            "$ref": "#/components/schemas/CorrelationId",
            "description": "Reference to the original transaction ID that is requested to be refunded.",
            "example": "b51ec534-ee48-4575-b6a9-ead2955b8069"
          },
          "refundReason": {
            "$ref": "#/components/schemas/RefundReason",
            "description": "Free text indicating the reason for the refund.",
            "example": "Free text indicating reason for the refund."
          }
        },
        "required": [
          "originalTransactionId"
        ]
      },
      "RefundReason": {
        "title": "RefundReason",
        "type": "string",
        "minLength": 1,
        "maxLength": 128,
        "description": "Reason for the refund."
      },
      "TokenCode": {
        "title": "TokenCode",
        "type": "string",
        "pattern": "^[0-9a-zA-Z]{4,32}$",
        "description": "The API data type TokenCode is a JSON String between 4 and 32 characters, consisting of digits or upper- or lowercase characters from a to z."
      },
      "Transaction": {
        "title": "Transaction",
        "type": "object",
        "description": "Data model for the complex type Transaction. The Transaction type is used to carry end-to-end data between the Payer FSP and the Payee FSP in the ILP Packet. Both the transactionId and the quoteId in the data model are decided by the Payer FSP in the POST /quotes request.",
        "properties": {
          "transactionId": {
            "$ref": "#/components/schemas/CorrelationId",
            "description": "ID of the transaction, the ID is decided by the Payer FSP during the creation of the quote."
          },
          "quoteId": {
            "$ref": "#/components/schemas/CorrelationId",
            "description": "ID of the quote, the ID is decided by the Payer FSP during the creation of the quote."
          },
          "payee": {
            "$ref": "#/components/schemas/Party",
            "description": "Information about the Payee in the proposed financial transaction."
          },
          "payer": {
            "$ref": "#/components/schemas/Party",
            "description": "Information about the Payer in the proposed financial transaction."
          },
          "amount": {
            "$ref": "#/components/schemas/Money",
            "description": "Transaction amount to be sent."
          },
          "transactionType": {
            "$ref": "#/components/schemas/TransactionType",
            "description": "Type of the transaction."
          },
          "note": {
            "$ref": "#/components/schemas/Note",
            "description": "Memo associated to the transaction, intended to the Payee."
          },
          "extensionList": {
            "$ref": "#/components/schemas/ExtensionList",
            "description": "Optional extension, specific to deployment."
          }
        },
        "required": [
          "transactionId",
          "quoteId",
          "payee",
          "payer",
          "amount",
          "transactionType"
        ]
      },
      "TransactionInitiator": {
        "title": "TransactionInitiator",
        "type": "string",
        "enum": [
          "PAYER",
          "PAYEE"
        ],
        "description": "Below are the allowed values for the enumeration.\n- PAYER - Sender of funds is initiating the transaction. The account to send from is either owned by the Payer or is connected to the Payer in some way.\n\n- PAYEE - Recipient of the funds is initiating the transaction by sending a transaction request. The Payer must approve the transaction, either automatically by a pre-generated OTP or by pre-approval of the Payee, or by manually approving in his or her own Device."
      },
      "TransactionInitiatorType": {
        "title": "TransactionInitiatorType",
        "type": "string",
        "enum": [
          "CONSUMER",
          "AGENT",
          "BUSINESS",
          "DEVICE"
        ],
        "description": "Below are the allowed values for the enumeration.\n- CONSUMER - Consumer is the initiator of the transaction.\n\n- AGENT - Agent is the initiator of the transaction.\n\n- BUSINESS - Business is the initiator of the transaction.\n\n- DEVICE - Device is the initiator of the transaction."
      },
      "TransactionRequestsIDPutResponse": {
        "title": "TransactionRequestsIDPutResponse",
        "type": "object",
        "description": "The object sent in the PUT /transactionRequests/{ID} callback.",
        "properties": {
          "transactionId": {
            "$ref": "#/components/schemas/CorrelationId",
            "description": "Identifies a related transaction (if a transaction has been created).",
            "example": "b51ec534-ee48-4575-b6a9-ead2955b8069"
          },
          "transactionRequestState": {
            "$ref": "#/components/schemas/TransactionRequestState",
            "description": "State of the transaction request.",
            "example": "RECEIVED"
          },
          "extensionList": {
            "$ref": "#/components/schemas/ExtensionList",
            "description": "Optional extension, specific to deployment."
          }
        },
        "required": [
          "transactionRequestState"
        ]
      },
      "TransactionRequestsPostRequest": {
        "title": "TransactionRequestsPostRequest",
        "type": "object",
        "description": "The object sent in the POST /transactionRequests request.",
        "properties": {
          "transactionRequestId": {
            "$ref": "#/components/schemas/CorrelationId",
            "description": "Common ID between the FSPs for the transaction request object, decided by the Payee FSP. The ID should be reused for resends of the same transaction request. A new ID should be generated for each new transaction request.",
            "example": "b51ec534-ee48-4575-b6a9-ead2955b8069"
          },
          "payee": {
            "$ref": "#/components/schemas/Party",
            "description": "Information about the Payee in the proposed financial transaction."
          },
          "payer": {
            "$ref": "#/components/schemas/PartyIdInfo",
            "description": "Information about the Payer type, id, sub-type/id, FSP Id in the proposed financial transaction."
          },
          "amount": {
            "$ref": "#/components/schemas/Money",
            "description": "Requested amount to be transferred from the Payer to Payee."
          },
          "transactionType": {
            "$ref": "#/components/schemas/TransactionType",
            "description": "Type of transaction."
          },
          "note": {
            "$ref": "#/components/schemas/Note",
            "description": "Reason for the transaction request, intended to the Payer.",
            "example": "Free-text memo."
          },
          "geoCode": {
            "$ref": "#/components/schemas/GeoCode",
            "description": "Longitude and Latitude of the initiating Party. Can be used to detect fraud."
          },
          "authenticationType": {
            "$ref": "#/components/schemas/AuthenticationType",
            "description": "OTP or QR Code, otherwise empty.",
            "example": "OTP"
          },
          "expiration": {
            "$ref": "#/components/schemas/DateTime",
            "description": "Can be set to get a quick failure in case the peer FSP takes too long to respond. Also, it may be beneficial for Consumer, Agent, Merchant to know that their request has a time limit.",
            "example": "2016-05-24T08:38:08.699-04:00"
          },
          "extensionList": {
            "$ref": "#/components/schemas/ExtensionList",
            "description": "Optional extension, specific to deployment."
          }
        },
        "required": [
          "transactionRequestId",
          "payee",
          "payer",
          "amount",
          "transactionType"
        ]
      },
      "TransactionRequestState": {
        "title": "TransactionRequestState",
        "type": "string",
        "enum": [
          "RECEIVED",
          "PENDING",
          "ACCEPTED",
          "REJECTED"
        ],
        "description": "Below are the allowed values for the enumeration.\n- RECEIVED - Payer FSP has received the transaction from the Payee FSP.\n\n- PENDING - Payer FSP has sent the transaction request to the Payer.\n\n- ACCEPTED - Payer has approved the transaction.\n\n- REJECTED - Payer has rejected the transaction."
      },
      "TransactionScenario": {
        "title": "TransactionScenario",
        "type": "string",
        "enum": [
          "DEPOSIT",
          "WITHDRAWAL",
          "TRANSFER",
          "PAYMENT",
          "REFUND"
        ],
        "description": "Below are the allowed values for the enumeration.\n- DEPOSIT - Used for performing a Cash-In (deposit) transaction. In a normal scenario, electronic funds are transferred from a Business account to a Consumer account, and physical cash is given from the Consumer to the Business User.\n\n- WITHDRAWAL - Used for performing a Cash-Out (withdrawal) transaction. In a normal scenario, electronic funds are transferred from a Consumer’s account to a Business account, and physical cash is given from the Business User to the Consumer.\n\n- TRANSFER - Used for performing a P2P (Peer to Peer, or Consumer to Consumer) transaction.\n\n- PAYMENT - Usually used for performing a transaction from a Consumer to a Merchant or Organization, but could also be for a B2B (Business to Business) payment. The transaction could be online for a purchase in an Internet store, in a physical store where both the Consumer and Business User are present, a bill payment, a donation, and so on.\n\n- REFUND - Used for performing a refund of transaction."
      },
      "TransactionsIDPutResponse": {
        "title": "TransactionsIDPutResponse",
        "type": "object",
        "description": "The object sent in the PUT /transactions/{ID} callback.",
        "properties": {
          "completedTimestamp": {
            "$ref": "#/components/schemas/DateTime",
            "description": "Time and date when the transaction was completed.",
            "example": "2016-05-24T08:38:08.699-04:00"
          },
          "transactionState": {
            "$ref": "#/components/schemas/TransactionState",
            "description": "State of the transaction.",
            "example": "RECEIVED"
          },
          "code": {
            "$ref": "#/components/schemas/Code",
            "description": "Optional redemption information provided to Payer after transaction has been completed.",
            "example": "Test-Code"
          },
          "extensionList": {
            "$ref": "#/components/schemas/ExtensionList",
            "description": "Optional extension, specific to deployment."
          }
        },
        "required": [
          "transactionState"
        ]
      },
      "TransactionState": {
        "title": "TransactionState",
        "type": "string",
        "enum": [
          "RECEIVED",
          "PENDING",
          "COMPLETED",
          "REJECTED"
        ],
        "description": "Below are the allowed values for the enumeration.\n- RECEIVED - Payee FSP has received the transaction from the Payer FSP.\n\n- PENDING - Payee FSP has validated the transaction.\n\n- COMPLETED - Payee FSP has successfully performed the transaction.\n\n- REJECTED - Payee FSP has failed to perform the transaction."
      },
      "TransactionSubScenario": {
        "title": "TransactionSubScenario",
        "type": "string",
        "pattern": "^[A-Z_]{1,32}$",
        "description": "Possible sub-scenario, defined locally within the scheme (UndefinedEnum Type)."
      },
      "TransactionType": {
        "title": "TransactionType",
        "type": "object",
        "description": "Data model for the complex type TransactionType.",
        "properties": {
          "scenario": {
            "$ref": "#/components/schemas/TransactionScenario",
            "description": "Deposit, withdrawal, refund, …",
            "example": "DEPOSIT"
          },
          "subScenario": {
            "$ref": "#/components/schemas/TransactionSubScenario",
            "description": "Possible sub-scenario, defined locally within the scheme.",
            "example": "Locally defined sub-scenario."
          },
          "initiator": {
            "$ref": "#/components/schemas/TransactionInitiator",
            "description": "Who is initiating the transaction - Payer or Payee.",
            "example": "PAYEE"
          },
          "initiatorType": {
            "$ref": "#/components/schemas/TransactionInitiatorType",
            "description": "Consumer, agent, business, …",
            "example": "CONSUMER"
          },
          "refundInfo": {
            "$ref": "#/components/schemas/Refund",
            "description": "Extra information specific to a refund scenario. Should only be populated if scenario is REFUND."
          },
          "balanceOfPayments": {
            "$ref": "#/components/schemas/BalanceOfPayments",
            "description": "Balance of Payments code.",
            "example": 123
          }
        },
        "required": [
          "scenario",
          "initiator",
          "initiatorType"
        ]
      },
      "TransfersIDPutResponse": {
        "title": "TransfersIDPutResponse",
        "type": "object",
        "description": "The object sent in the PUT /transfers/{ID} callback.",
        "properties": {
          "fulfilment": {
            "$ref": "#/components/schemas/IlpFulfilment",
            "description": "Fulfilment of the condition specified with the transaction. Mandatory if transfer has completed successfully.",
            "example": "WLctttbu2HvTsa1XWvUoGRcQozHsqeu9Ahl2JW9Bsu8"
          },
          "completedTimestamp": {
            "$ref": "#/components/schemas/DateTime",
            "description": "Time and date when the transaction was completed.",
            "example": "2016-05-24T08:38:08.699-04:00"
          },
          "transferState": {
            "$ref": "#/components/schemas/TransferState",
            "description": "State of the transfer.",
            "example": "RESERVED"
          },
          "extensionList": {
            "$ref": "#/components/schemas/ExtensionList",
            "description": "Optional extension, specific to deployment."
          }
        },
        "required": [
          "transferState"
        ]
      },
      "TransfersPostRequest": {
        "$ref": "node_modules/api-snippets/v1.0/openapi3/schemas/TransfersPostRequest.yaml"
      },
      "TransferState": {
        "title": "TransferState",
        "type": "string",
        "enum": [
          "RECEIVED",
          "RESERVED",
          "COMMITTED",
          "ABORTED"
        ],
        "description": "Below are the allowed values for the enumeration.\n- RECEIVED - Next ledger has received the transfer.\n\n- RESERVED - Next ledger has reserved the transfer.\n\n- COMMITTED - Next ledger has successfully performed the transfer.\n\n- ABORTED - Next ledger has aborted the transfer due to a rejection or failure to perform the transfer."
      },
      "UndefinedEnum": {
        "title": "UndefinedEnum",
        "type": "string",
        "pattern": "^[A-Z_]{1,32}$",
        "description": "The API data type UndefinedEnum is a JSON String consisting of 1 to 32 uppercase characters including an underscore character (_)."
      }
    }
  }
}
